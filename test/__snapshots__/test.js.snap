// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DOMImplementation.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class DOMImplementation {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  createDocumentType(qualifiedName, publicId, systemId) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 3) {
      throw new TypeError(
        \\"Failed to execute 'createDocumentType' on 'DOMImplementation': 3 arguments required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"DOMString\\"](curArg, {
        context: \\"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 1\\"
      });
      args.push(curArg);
    }
    {
      let curArg = arguments[1];
      curArg = conversions[\\"DOMString\\"](curArg, {
        context: \\"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 2\\"
      });
      args.push(curArg);
    }
    {
      let curArg = arguments[2];
      curArg = conversions[\\"DOMString\\"](curArg, {
        context: \\"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 3\\"
      });
      args.push(curArg);
    }
    return utils.tryWrapperForImpl(this[impl].createDocumentType(...args));
  }

  createDocument(namespace, qualifiedName) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 2) {
      throw new TypeError(
        \\"Failed to execute 'createDocument' on 'DOMImplementation': 2 arguments required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (curArg === null || curArg === undefined) {
        curArg = null;
      } else {
        curArg = conversions[\\"DOMString\\"](curArg, {
          context: \\"Failed to execute 'createDocument' on 'DOMImplementation': parameter 1\\"
        });
      }
      args.push(curArg);
    }
    {
      let curArg = arguments[1];
      curArg = conversions[\\"DOMString\\"](curArg, {
        context: \\"Failed to execute 'createDocument' on 'DOMImplementation': parameter 2\\",
        treatNullAsEmptyString: true
      });
      args.push(curArg);
    }
    {
      let curArg = arguments[2];
      if (curArg !== undefined) {
        if (curArg === null || curArg === undefined) {
          curArg = null;
        } else {
          curArg = utils.tryImplForWrapper(curArg);
        }
      } else {
        curArg = null;
      }
      args.push(curArg);
    }
    return utils.tryWrapperForImpl(this[impl].createDocument(...args));
  }

  createHTMLDocument() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (curArg !== undefined) {
        curArg = conversions[\\"DOMString\\"](curArg, {
          context: \\"Failed to execute 'createHTMLDocument' on 'DOMImplementation': parameter 1\\"
        });
      }
      args.push(curArg);
    }
    return utils.tryWrapperForImpl(this[impl].createHTMLDocument(...args));
  }

  hasFeature() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].hasFeature();
  }
}
Object.defineProperties(DOMImplementation.prototype, {
  createDocumentType: { enumerable: true },
  createDocument: { enumerable: true },
  createHTMLDocument: { enumerable: true },
  hasFeature: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"DOMImplementation\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'DOMImplementation'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(DOMImplementation.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(DOMImplementation.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: DOMImplementation,
  expose: {
    Window: { DOMImplementation }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/DOMImplementation.js\\");
"
`;

exports[`Dictionary.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const convertURL = require(\\"./URL.js\\").convert;
const convertURLSearchParams = require(\\"./URLSearchParams.js\\").convert;

module.exports = {
  convertInherit(obj, ret, { context = \\"The provided value\\" } = {}) {
    {
      const key = \\"boolWithDefault\\";
      let value = obj === undefined || obj === null ? undefined : obj[key];
      if (value !== undefined) {
        value = conversions[\\"boolean\\"](value, { context: context + \\" has member boolWithDefault that\\" });

        ret[key] = value;
      } else {
        ret[key] = false;
      }
    }

    {
      const key = \\"requiredInterface\\";
      let value = obj === undefined || obj === null ? undefined : obj[key];
      if (value !== undefined) {
        value = convertURL(value, { context: context + \\" has member requiredInterface that\\" });

        ret[key] = value;
      } else {
        throw new TypeError(\\"requiredInterface is required in 'Dictionary'\\");
      }
    }

    {
      const key = \\"seq\\";
      let value = obj === undefined || obj === null ? undefined : obj[key];
      if (value !== undefined) {
        if (!utils.isObject(value)) {
          throw new TypeError(context + \\" has member seq that\\" + \\" is not an iterable object.\\");
        } else {
          const V = [];
          const tmp = value;
          for (let nextItem of tmp) {
            nextItem = convertURLSearchParams(nextItem, { context: context + \\" has member seq that\\" + \\"'s element\\" });

            V.push(nextItem);
          }
          value = V;
        }

        ret[key] = value;
      }
    }

    {
      const key = \\"vanillaString\\";
      let value = obj === undefined || obj === null ? undefined : obj[key];
      if (value !== undefined) {
        value = conversions[\\"DOMString\\"](value, { context: context + \\" has member vanillaString that\\" });

        ret[key] = value;
      }
    }
  },

  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (obj !== undefined && typeof obj !== \\"object\\" && typeof obj !== \\"function\\") {
      throw new TypeError(\`\${context} is not an object.\`);
    }

    const ret = Object.create(null);
    module.exports.convertInherit(obj, ret, { context });
    return ret;
  }
};
"
`;

exports[`DictionaryConvert.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const convertDictionary = require(\\"./Dictionary.js\\").convert;
const impl = utils.implSymbol;

class DictionaryConvert {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  op() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (curArg !== undefined) {
        curArg = conversions[\\"DOMString\\"](curArg, {
          context: \\"Failed to execute 'op' on 'DictionaryConvert': parameter 1\\"
        });
      }
      args.push(curArg);
    }
    {
      let curArg = arguments[1];
      curArg = convertDictionary(curArg, { context: \\"Failed to execute 'op' on 'DictionaryConvert': parameter 2\\" });
      args.push(curArg);
    }
    return this[impl].op(...args);
  }
}
Object.defineProperties(DictionaryConvert.prototype, {
  op: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"DictionaryConvert\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'DictionaryConvert'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(DictionaryConvert.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(DictionaryConvert.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: DictionaryConvert,
  expose: {
    Window: { DictionaryConvert }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/DictionaryConvert.js\\");
"
`;

exports[`Enum.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const convertRequestDestination = require(\\"./RequestDestination.js\\").convert;
const RequestDestination = require(\\"./RequestDestination.js\\");
const impl = utils.implSymbol;

class Enum {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  op(destination) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'op' on 'Enum': 1 argument required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = convertRequestDestination(curArg, { context: \\"Failed to execute 'op' on 'Enum': parameter 1\\" });
      args.push(curArg);
    }
    return this[impl].op(...args);
  }

  get attr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return utils.tryWrapperForImpl(this[impl][\\"attr\\"]);
  }

  set attr(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = \`\${V}\`;
    if (!RequestDestination.enumerationValues.has(V)) {
      return;
    }

    this[impl][\\"attr\\"] = V;
  }
}
Object.defineProperties(Enum.prototype, {
  op: { enumerable: true },
  attr: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"Enum\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'Enum'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(Enum.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(Enum.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: Enum,
  expose: {
    Window: { Enum }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/Enum.js\\");
"
`;

exports[`Factory.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

module.exports = {
  createInterface: function(defaultPrivateData = {}) {
    class Factory {
      constructor() {
        throw new TypeError(\\"Illegal constructor\\");
      }

      method() {
        if (!this || !module.exports.is(this)) {
          throw new TypeError(\\"Illegal invocation\\");
        }

        return this[impl].method();
      }

      get attribute() {
        if (!this || !module.exports.is(this)) {
          throw new TypeError(\\"Illegal invocation\\");
        }

        return this[impl][\\"attribute\\"];
      }

      set attribute(V) {
        if (!this || !module.exports.is(this)) {
          throw new TypeError(\\"Illegal invocation\\");
        }

        V = conversions[\\"double\\"](V, {
          context: \\"Failed to set the 'attribute' property on 'Factory': The provided value\\"
        });

        this[impl][\\"attribute\\"] = V;
      }
    }
    Object.defineProperties(Factory.prototype, {
      method: { enumerable: true },
      attribute: { enumerable: true },
      [Symbol.toStringTag]: { value: \\"Factory\\", configurable: true },
      constant: { value: 42, enumerable: true }
    });
    Object.defineProperties(Factory, { constant: { value: 42, enumerable: true } });
    const iface = {
      create(constructorArgs, privateData) {
        let obj = Object.create(Factory.prototype);
        obj = this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      createImpl(constructorArgs, privateData) {
        let obj = Object.create(Factory.prototype);
        obj = this.setup(obj, constructorArgs, privateData);
        return utils.implForWrapper(obj);
      },
      _internalSetup(obj) {},
      setup(obj, constructorArgs, privateData) {
        if (!privateData) privateData = {};

        for (var prop in defaultPrivateData) {
          if (!(prop in privateData)) {
            privateData[prop] = defaultPrivateData[prop];
          }
        }

        privateData.wrapper = obj;

        this._internalSetup(obj);
        Object.defineProperty(obj, impl, {
          value: new Impl.implementation(constructorArgs, privateData),
          configurable: true
        });

        obj[impl][utils.wrapperSymbol] = obj;
        if (Impl.init) {
          Impl.init(obj[impl], privateData);
        }
        return obj;
      },
      interface: Factory,
      expose: {
        Window: { Factory }
      }
    }; // iface
    return iface;
  }, // createInterface

  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'Factory'.\`);
  }
}; // module.exports

const Impl = require(\\"../implementations/Factory.js\\");
"
`;

exports[`Global.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class Global {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }
}
Object.defineProperties(Global.prototype, { [Symbol.toStringTag]: { value: \\"Global\\", configurable: true } });
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'Global'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(Global.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(Global.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {
    Object.defineProperties(
      obj,
      utils.getOwnPropertyDescriptors({
        op() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          return this[impl].op();
        },
        unforgeableOp() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          return this[impl].unforgeableOp();
        },
        get attr() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          return obj[impl][\\"attr\\"];
        },
        set attr(V) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          V = conversions[\\"DOMString\\"](V, {
            context: \\"Failed to set the 'attr' property on 'Global': The provided value\\"
          });

          obj[impl][\\"attr\\"] = V;
        },
        get unforgeableAttr() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          return obj[impl][\\"unforgeableAttr\\"];
        },
        set unforgeableAttr(V) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          V = conversions[\\"DOMString\\"](V, {
            context: \\"Failed to set the 'unforgeableAttr' property on 'Global': The provided value\\"
          });

          obj[impl][\\"unforgeableAttr\\"] = V;
        },
        get length() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          return obj[impl][\\"length\\"];
        },
        set length(V) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          V = conversions[\\"unsigned long\\"](V, {
            context: \\"Failed to set the 'length' property on 'Global': The provided value\\"
          });

          obj[impl][\\"length\\"] = V;
        },
        [Symbol.iterator]: Array.prototype[Symbol.iterator],
        keys: Array.prototype.keys,
        values: Array.prototype[Symbol.iterator],
        entries: Array.prototype.entries,
        forEach: Array.prototype.forEach
      })
    );

    Object.defineProperties(obj, {
      unforgeableOp: { configurable: false, writable: false },
      unforgeableAttr: { configurable: false },
      [Symbol.iterator]: { enumerable: false }
    });
  },
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: Global,
  expose: {
    Window: { Global }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/Global.js\\");
"
`;

exports[`LegacyArrayClass.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class LegacyArrayClass {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  get length() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"length\\"];
  }
}
Object.setPrototypeOf(LegacyArrayClass.prototype, Array.prototype);
Object.defineProperties(LegacyArrayClass.prototype, {
  length: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"LegacyArrayClass\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'LegacyArrayClass'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(LegacyArrayClass.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(LegacyArrayClass.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: LegacyArrayClass,
  expose: {
    Window: { LegacyArrayClass }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/LegacyArrayClass.js\\");
"
`;

exports[`MixedIn.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;
const Mixin = require(\\"./Mixin.js\\");
const MixinMixin = require(\\"./MixinMixin.js\\");
const MixinInherited = require(\\"./MixinInherited.js\\");

class MixedIn {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  mixedInOp() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].mixedInOp();
  }

  ifaceMixinOp() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].ifaceMixinOp();
  }

  mixinOp() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].mixinOp();
  }

  mixinMixinOp() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].mixinMixinOp();
  }

  mixinInheritedOp() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].mixinInheritedOp();
  }

  toString() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].mixinInheritedOp();
  }

  get mixedInAttr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"mixedInAttr\\"];
  }

  set mixedInAttr(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'mixedInAttr' property on 'MixedIn': The provided value\\"
    });

    this[impl][\\"mixedInAttr\\"] = V;
  }

  get ifaceMixinAttr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"ifaceMixinAttr\\"];
  }

  set ifaceMixinAttr(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'ifaceMixinAttr' property on 'MixedIn': The provided value\\"
    });

    this[impl][\\"ifaceMixinAttr\\"] = V;
  }

  get mixinAttr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"mixinAttr\\"];
  }

  set mixinAttr(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'mixinAttr' property on 'MixedIn': The provided value\\"
    });

    this[impl][\\"mixinAttr\\"] = V;
  }

  get mixinMixinAttr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"mixinMixinAttr\\"];
  }

  set mixinMixinAttr(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'mixinMixinAttr' property on 'MixedIn': The provided value\\"
    });

    this[impl][\\"mixinMixinAttr\\"] = V;
  }

  get mixinInheritedAttr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"mixinInheritedAttr\\"];
  }

  set mixinInheritedAttr(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'mixinInheritedAttr' property on 'MixedIn': The provided value\\"
    });

    this[impl][\\"mixinInheritedAttr\\"] = V;
  }
}
Object.defineProperties(MixedIn.prototype, {
  mixedInOp: { enumerable: true },
  ifaceMixinOp: { enumerable: true },
  mixinOp: { enumerable: true },
  mixinMixinOp: { enumerable: true },
  mixinInheritedOp: { enumerable: true },
  toString: { enumerable: true },
  mixedInAttr: { enumerable: true },
  ifaceMixinAttr: { enumerable: true },
  mixinAttr: { enumerable: true },
  mixinMixinAttr: { enumerable: true },
  mixinInheritedAttr: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"MixedIn\\", configurable: true },
  mixedInConst: { value: 43, enumerable: true },
  ifaceMixinConst: { value: 42, enumerable: true },
  mixinConst: { value: 42, enumerable: true },
  mixinMixinConst: { value: 42, enumerable: true },
  mixinInheritedConst: { value: 42, enumerable: true }
});
Object.defineProperties(MixedIn, {
  mixedInConst: { value: 43, enumerable: true },
  ifaceMixinConst: { value: 42, enumerable: true },
  mixinConst: { value: 42, enumerable: true },
  mixinMixinConst: { value: 42, enumerable: true },
  mixinInheritedConst: { value: 42, enumerable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'MixedIn'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(MixedIn.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(MixedIn.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: MixedIn,
  expose: {
    Window: { MixedIn }
  }
}; // iface
module.exports = iface;

Mixin._mixedIntoPredicates.push(module.exports.is);

MixinMixin._mixedIntoPredicates.push(module.exports.is);

MixinInherited._mixedIntoPredicates.push(module.exports.is);

const Impl = require(\\"../implementations/MixedIn.js\\");
"
`;

exports[`Mixin.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;
const MixinInherited = require(\\"./MixinInherited.js\\");
const MixinMixin = require(\\"./MixinMixin.js\\");

class Mixin extends MixinInherited.interface {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  mixinOp() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].mixinOp();
  }

  mixinMixinOp() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].mixinMixinOp();
  }

  get mixinAttr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"mixinAttr\\"];
  }

  set mixinAttr(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'mixinAttr' property on 'Mixin': The provided value\\"
    });

    this[impl][\\"mixinAttr\\"] = V;
  }

  get mixinMixinAttr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"mixinMixinAttr\\"];
  }

  set mixinMixinAttr(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'mixinMixinAttr' property on 'Mixin': The provided value\\"
    });

    this[impl][\\"mixinMixinAttr\\"] = V;
  }
}
Object.defineProperties(Mixin.prototype, {
  mixinOp: { enumerable: true },
  mixinMixinOp: { enumerable: true },
  mixinAttr: { enumerable: true },
  mixinMixinAttr: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"Mixin\\", configurable: true },
  mixinConst: { value: 42, enumerable: true },
  mixinMixinConst: { value: 42, enumerable: true }
});
Object.defineProperties(Mixin, {
  mixinConst: { value: 42, enumerable: true },
  mixinMixinConst: { value: 42, enumerable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'Mixin'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(Mixin.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(Mixin.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {
    MixinInherited._internalSetup(obj);
  },
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: Mixin,
  expose: {}
}; // iface
module.exports = iface;

MixinMixin._mixedIntoPredicates.push(module.exports.is);

const Impl = require(\\"../implementations/Mixin.js\\");
"
`;

exports[`MixinInherited.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class MixinInherited {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  mixinInheritedOp() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].mixinInheritedOp();
  }

  toString() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].mixinInheritedOp();
  }

  get mixinInheritedAttr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"mixinInheritedAttr\\"];
  }

  set mixinInheritedAttr(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'mixinInheritedAttr' property on 'MixinInherited': The provided value\\"
    });

    this[impl][\\"mixinInheritedAttr\\"] = V;
  }
}
Object.defineProperties(MixinInherited.prototype, {
  mixinInheritedOp: { enumerable: true },
  toString: { enumerable: true },
  mixinInheritedAttr: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"MixinInherited\\", configurable: true },
  mixinInheritedConst: { value: 42, enumerable: true }
});
Object.defineProperties(MixinInherited, { mixinInheritedConst: { value: 42, enumerable: true } });
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'MixinInherited'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(MixinInherited.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(MixinInherited.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: MixinInherited,
  expose: {}
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/MixinInherited.js\\");
"
`;

exports[`MixinMixin.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class MixinMixin {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  mixinMixinOp() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].mixinMixinOp();
  }

  get mixinMixinAttr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"mixinMixinAttr\\"];
  }

  set mixinMixinAttr(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'mixinMixinAttr' property on 'MixinMixin': The provided value\\"
    });

    this[impl][\\"mixinMixinAttr\\"] = V;
  }
}
Object.defineProperties(MixinMixin.prototype, {
  mixinMixinOp: { enumerable: true },
  mixinMixinAttr: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"MixinMixin\\", configurable: true },
  mixinMixinConst: { value: 42, enumerable: true }
});
Object.defineProperties(MixinMixin, { mixinMixinConst: { value: 42, enumerable: true } });
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'MixinMixin'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(MixinMixin.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(MixinMixin.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: MixinMixin,
  expose: {}
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/MixinMixin.js\\");
"
`;

exports[`Overloads.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const isURL = require(\\"./URL.js\\").is;
const convertURL = require(\\"./URL.js\\").convert;
const impl = utils.implSymbol;

class Overloads {
  constructor() {
    const args = [];
    switch (arguments.length) {
      case 0:
        break;
      default: {
        let curArg = arguments[0];
        if (isURL(curArg)) {
          {
            let curArg = arguments[0];
            curArg = convertURL(curArg, { context: \\"Failed to construct 'Overloads': parameter 1\\" });
            args.push(curArg);
          }
        } else {
          {
            let curArg = arguments[0];
            curArg = conversions[\\"DOMString\\"](curArg, { context: \\"Failed to construct 'Overloads': parameter 1\\" });
            args.push(curArg);
          }
        }
      }
    }
    return iface.setup(Object.create(new.target.prototype), args);
  }

  compatible(arg1) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'compatible' on 'Overloads': 1 argument required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    switch (arguments.length) {
      case 1:
        {
          let curArg = arguments[0];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'compatible' on 'Overloads': parameter 1\\"
          });
          args.push(curArg);
        }
        break;
      case 2:
        {
          let curArg = arguments[0];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'compatible' on 'Overloads': parameter 1\\"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'compatible' on 'Overloads': parameter 2\\"
          });
          args.push(curArg);
        }
        break;
      default:
        {
          let curArg = arguments[0];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'compatible' on 'Overloads': parameter 1\\"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'compatible' on 'Overloads': parameter 2\\"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[2];
          if (curArg !== undefined) {
            curArg = conversions[\\"long\\"](curArg, {
              context: \\"Failed to execute 'compatible' on 'Overloads': parameter 3\\"
            });
          } else {
            curArg = 0;
          }
          args.push(curArg);
        }
    }
    return utils.tryWrapperForImpl(this[impl].compatible(...args));
  }

  incompatible1(arg1) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'incompatible1' on 'Overloads': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (typeof curArg === \\"number\\") {
        {
          let curArg = arguments[0];
          curArg = conversions[\\"long\\"](curArg, {
            context: \\"Failed to execute 'incompatible1' on 'Overloads': parameter 1\\"
          });
          args.push(curArg);
        }
      } else {
        {
          let curArg = arguments[0];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'incompatible1' on 'Overloads': parameter 1\\"
          });
          args.push(curArg);
        }
      }
    }
    return this[impl].incompatible1(...args);
  }

  incompatible2(arg1) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'incompatible2' on 'Overloads': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    switch (arguments.length) {
      case 1:
        {
          let curArg = arguments[0];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'incompatible2' on 'Overloads': parameter 1\\"
          });
          args.push(curArg);
        }
        break;
      default:
        {
          let curArg = arguments[0];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'incompatible2' on 'Overloads': parameter 1\\"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'incompatible2' on 'Overloads': parameter 2\\"
          });
          args.push(curArg);
        }
    }
    return this[impl].incompatible2(...args);
  }

  incompatible3(arg1) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'incompatible3' on 'Overloads': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    switch (arguments.length) {
      case 1:
        {
          let curArg = arguments[0];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'incompatible3' on 'Overloads': parameter 1\\"
          });
          args.push(curArg);
        }
        break;
      case 2:
        {
          let curArg = arguments[0];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'incompatible3' on 'Overloads': parameter 1\\"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          if (curArg === undefined) {
            {
              let curArg = arguments[1];
              if (curArg !== undefined) {
                curArg = convertURL(curArg, {
                  context: \\"Failed to execute 'incompatible3' on 'Overloads': parameter 2\\"
                });
              }
              args.push(curArg);
            }
          } else if (isURL(curArg)) {
            {
              let curArg = arguments[1];
              if (curArg !== undefined) {
                curArg = convertURL(curArg, {
                  context: \\"Failed to execute 'incompatible3' on 'Overloads': parameter 2\\"
                });
              }
              args.push(curArg);
            }
          } else if (
            curArg instanceof ArrayBuffer ||
            (typeof SharedArrayBuffer !== \\"undefined\\" && curArg instanceof SharedArrayBuffer)
          ) {
            {
              let curArg = arguments[1];
              if (curArg instanceof ArrayBuffer) {
              } else if (ArrayBuffer.isView(curArg)) {
              } else {
                throw new TypeError(
                  \\"Failed to execute 'incompatible3' on 'Overloads': parameter 2\\" + \\" is not of any supported type.\\"
                );
              }
              args.push(curArg);
            }
          } else if (ArrayBuffer.isView(curArg)) {
            {
              let curArg = arguments[1];
              if (curArg instanceof ArrayBuffer) {
              } else if (ArrayBuffer.isView(curArg)) {
              } else {
                throw new TypeError(
                  \\"Failed to execute 'incompatible3' on 'Overloads': parameter 2\\" + \\" is not of any supported type.\\"
                );
              }
              args.push(curArg);
            }
          } else {
            {
              let curArg = arguments[1];
              curArg = conversions[\\"DOMString\\"](curArg, {
                context: \\"Failed to execute 'incompatible3' on 'Overloads': parameter 2\\"
              });
              args.push(curArg);
            }
          }
        }
        break;
      case 3:
        throw new TypeError(
          \\"Failed to execute 'incompatible3' on 'Overloads': only \\" + arguments.length + \\" arguments present.\\"
        );
        break;
      default:
        {
          let curArg = arguments[0];
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'incompatible3' on 'Overloads': parameter 1\\"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          curArg = conversions[\\"long\\"](curArg, {
            context: \\"Failed to execute 'incompatible3' on 'Overloads': parameter 2\\"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[2];
          if (curArg instanceof ArrayBuffer) {
          } else if (ArrayBuffer.isView(curArg)) {
          } else {
            throw new TypeError(
              \\"Failed to execute 'incompatible3' on 'Overloads': parameter 3\\" + \\" is not of any supported type.\\"
            );
          }
          args.push(curArg);
        }
        {
          let curArg = arguments[3];
          if (curArg instanceof ArrayBuffer) {
          } else if (ArrayBuffer.isView(curArg)) {
          } else {
            throw new TypeError(
              \\"Failed to execute 'incompatible3' on 'Overloads': parameter 4\\" + \\" is not of any supported type.\\"
            );
          }
          args.push(curArg);
        }
    }
    return this[impl].incompatible3(...args);
  }
}
Object.defineProperties(Overloads.prototype, {
  compatible: { enumerable: true },
  incompatible1: { enumerable: true },
  incompatible2: { enumerable: true },
  incompatible3: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"Overloads\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'Overloads'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(Overloads.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(Overloads.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: Overloads,
  expose: {
    Window: { Overloads }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/Overloads.js\\");
"
`;

exports[`PromiseTypes.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class PromiseTypes {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  voidPromiseConsumer(p) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'voidPromiseConsumer' on 'PromiseTypes': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = Promise.resolve(curArg).then(value => {}, reason => reason);
      args.push(curArg);
    }
    return this[impl].voidPromiseConsumer(...args);
  }

  promiseConsumer(p) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'promiseConsumer' on 'PromiseTypes': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = Promise.resolve(curArg).then(
        value => {
          value = conversions[\\"double\\"](value, {
            context: \\"Failed to execute 'promiseConsumer' on 'PromiseTypes': parameter 1\\" + \\" promise value\\"
          });

          return value;
        },
        reason => reason
      );
      args.push(curArg);
    }
    return this[impl].promiseConsumer(...args);
  }
}
Object.defineProperties(PromiseTypes.prototype, {
  voidPromiseConsumer: { enumerable: true },
  promiseConsumer: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"PromiseTypes\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'PromiseTypes'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(PromiseTypes.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(PromiseTypes.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: PromiseTypes,
  expose: {
    Window: { PromiseTypes }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/PromiseTypes.js\\");
"
`;

exports[`Reflect.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class Reflect {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  get ReflectedBoolean() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this.hasAttribute(\\"ReflectedBoolean\\");
  }

  set ReflectedBoolean(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"boolean\\"](V, {
      context: \\"Failed to set the 'ReflectedBoolean' property on 'Reflect': The provided value\\"
    });

    if (V) {
      this.setAttribute(\\"ReflectedBoolean\\", \\"\\");
    } else {
      this.removeAttribute(\\"ReflectedBoolean\\");
    }
  }

  get ReflectedDOMString() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    const value = this.getAttribute(\\"ReflectedDOMString\\");
    return value === null ? \\"\\" : value;
  }

  set ReflectedDOMString(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'ReflectedDOMString' property on 'Reflect': The provided value\\"
    });

    this.setAttribute(\\"ReflectedDOMString\\", V);
  }

  get ReflectedLong() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    const value = parseInt(this.getAttribute(\\"ReflectedLong\\"));
    return isNaN(value) || value < -2147483648 || value > 2147483647 ? 0 : value;
  }

  set ReflectedLong(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"long\\"](V, {
      context: \\"Failed to set the 'ReflectedLong' property on 'Reflect': The provided value\\"
    });

    this.setAttribute(\\"ReflectedLong\\", String(V));
  }

  get ReflectedUnsignedLong() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    const value = parseInt(this.getAttribute(\\"ReflectedUnsignedLong\\"));
    return isNaN(value) || value < 0 || value > 2147483647 ? 0 : value;
  }

  set ReflectedUnsignedLong(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"unsigned long\\"](V, {
      context: \\"Failed to set the 'ReflectedUnsignedLong' property on 'Reflect': The provided value\\"
    });

    this.setAttribute(\\"ReflectedUnsignedLong\\", String(V > 2147483647 ? 0 : V));
  }

  get ReflectionTest() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    const value = this.getAttribute(\\"reflection\\");
    return value === null ? \\"\\" : value;
  }

  set ReflectionTest(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'ReflectionTest' property on 'Reflect': The provided value\\"
    });

    this.setAttribute(\\"reflection\\", V);
  }

  get withUnderscore() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    const value = this.getAttribute(\\"with-underscore\\");
    return value === null ? \\"\\" : value;
  }

  set withUnderscore(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'withUnderscore' property on 'Reflect': The provided value\\"
    });

    this.setAttribute(\\"with-underscore\\", V);
  }
}
Object.defineProperties(Reflect.prototype, {
  ReflectedBoolean: { enumerable: true },
  ReflectedDOMString: { enumerable: true },
  ReflectedLong: { enumerable: true },
  ReflectedUnsignedLong: { enumerable: true },
  ReflectionTest: { enumerable: true },
  withUnderscore: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"Reflect\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'Reflect'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(Reflect.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(Reflect.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: Reflect,
  expose: {
    Window: { Reflect }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/Reflect.js\\");
"
`;

exports[`RequestDestination.webidl 1`] = `
"\\"use strict\\";

const enumerationValues = new Set([
  \\"\\",
  \\"audio\\",
  \\"document\\",
  \\"embed\\",
  \\"font\\",
  \\"image\\",
  \\"manifest\\",
  \\"object\\",
  \\"report\\",
  \\"script\\",
  \\"sharedworker\\",
  \\"style\\",
  \\"track\\",
  \\"video\\",
  \\"worker\\",
  \\"xslt\\"
]);
module.exports = {
  enumerationValues,
  convert(value, { context = \\"The provided value\\" } = {}) {
    const string = \`\${value}\`;
    if (!enumerationValues.has(value)) {
      throw new TypeError(\`\${context} '\${value}' is not a valid enumeration value for RequestDestination\`);
    }
    return string;
  }
};
"
`;

exports[`SeqAndRec.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const convertURL = require(\\"./URL.js\\").convert;
const impl = utils.implSymbol;

class SeqAndRec {
  constructor() {
    return iface.setup(Object.create(new.target.prototype));
  }

  recordConsumer(rec) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'recordConsumer' on 'SeqAndRec': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (!utils.isObject(curArg)) {
        throw new TypeError(\\"Failed to execute 'recordConsumer' on 'SeqAndRec': parameter 1\\" + \\" is not an object.\\");
      } else {
        const result = Object.create(null);
        for (const key of Reflect.ownKeys(curArg)) {
          const desc = Object.getOwnPropertyDescriptor(curArg, key);
          if (desc && desc.enumerable) {
            let typedKey = key;
            let typedValue = curArg[key];

            typedKey = conversions[\\"USVString\\"](typedKey, {
              context: \\"Failed to execute 'recordConsumer' on 'SeqAndRec': parameter 1\\" + \\"'s key\\"
            });

            typedValue = conversions[\\"double\\"](typedValue, {
              context: \\"Failed to execute 'recordConsumer' on 'SeqAndRec': parameter 1\\" + \\"'s value\\"
            });

            result[typedKey] = typedValue;
          }
        }
        curArg = result;
      }
      args.push(curArg);
    }
    return this[impl].recordConsumer(...args);
  }

  recordConsumer2(rec) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'recordConsumer2' on 'SeqAndRec': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (!utils.isObject(curArg)) {
        throw new TypeError(\\"Failed to execute 'recordConsumer2' on 'SeqAndRec': parameter 1\\" + \\" is not an object.\\");
      } else {
        const result = Object.create(null);
        for (const key of Reflect.ownKeys(curArg)) {
          const desc = Object.getOwnPropertyDescriptor(curArg, key);
          if (desc && desc.enumerable) {
            let typedKey = key;
            let typedValue = curArg[key];

            typedKey = conversions[\\"USVString\\"](typedKey, {
              context: \\"Failed to execute 'recordConsumer2' on 'SeqAndRec': parameter 1\\" + \\"'s key\\"
            });

            typedValue = convertURL(typedValue, {
              context: \\"Failed to execute 'recordConsumer2' on 'SeqAndRec': parameter 1\\" + \\"'s value\\"
            });

            result[typedKey] = typedValue;
          }
        }
        curArg = result;
      }
      args.push(curArg);
    }
    return this[impl].recordConsumer2(...args);
  }

  sequenceConsumer(seq) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'sequenceConsumer' on 'SeqAndRec': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (!utils.isObject(curArg)) {
        throw new TypeError(
          \\"Failed to execute 'sequenceConsumer' on 'SeqAndRec': parameter 1\\" + \\" is not an iterable object.\\"
        );
      } else {
        const V = [];
        const tmp = curArg;
        for (let nextItem of tmp) {
          nextItem = conversions[\\"USVString\\"](nextItem, {
            context: \\"Failed to execute 'sequenceConsumer' on 'SeqAndRec': parameter 1\\" + \\"'s element\\"
          });

          V.push(nextItem);
        }
        curArg = V;
      }
      args.push(curArg);
    }
    return this[impl].sequenceConsumer(...args);
  }

  sequenceConsumer2(seq) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'sequenceConsumer2' on 'SeqAndRec': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (!utils.isObject(curArg)) {
        throw new TypeError(
          \\"Failed to execute 'sequenceConsumer2' on 'SeqAndRec': parameter 1\\" + \\" is not an iterable object.\\"
        );
      } else {
        const V = [];
        const tmp = curArg;
        for (let nextItem of tmp) {
          nextItem = utils.tryImplForWrapper(nextItem);

          V.push(nextItem);
        }
        curArg = V;
      }
      args.push(curArg);
    }
    return this[impl].sequenceConsumer2(...args);
  }

  frozenArrayConsumer(arr) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'frozenArrayConsumer' on 'SeqAndRec': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (!utils.isObject(curArg)) {
        throw new TypeError(
          \\"Failed to execute 'frozenArrayConsumer' on 'SeqAndRec': parameter 1\\" + \\" is not an iterable object.\\"
        );
      } else {
        const V = [];
        const tmp = curArg;
        for (let nextItem of tmp) {
          nextItem = conversions[\\"double\\"](nextItem, {
            context: \\"Failed to execute 'frozenArrayConsumer' on 'SeqAndRec': parameter 1\\" + \\"'s element\\"
          });

          V.push(nextItem);
        }
        curArg = V;
      }
      curArg = Object.freeze(curArg);
      args.push(curArg);
    }
    return this[impl].frozenArrayConsumer(...args);
  }
}
Object.defineProperties(SeqAndRec.prototype, {
  recordConsumer: { enumerable: true },
  recordConsumer2: { enumerable: true },
  sequenceConsumer: { enumerable: true },
  sequenceConsumer2: { enumerable: true },
  frozenArrayConsumer: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"SeqAndRec\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'SeqAndRec'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(SeqAndRec.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(SeqAndRec.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: SeqAndRec,
  expose: {
    Window: { SeqAndRec }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/SeqAndRec.js\\");
"
`;

exports[`Static.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class Static {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  def() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].def();
  }

  get abc() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"abc\\"];
  }

  set abc(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, { context: \\"Failed to set the 'abc' property on 'Static': The provided value\\" });

    this[impl][\\"abc\\"] = V;
  }

  static def() {
    return Impl.implementation.def();
  }

  static get abc() {
    return Impl.implementation[\\"abc\\"];
  }

  static set abc(V) {
    return Impl.implementation[\\"abc\\"];
  }
}
Object.defineProperties(Static.prototype, {
  def: { enumerable: true },
  abc: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"Static\\", configurable: true }
});
Object.defineProperties(Static, { def: { enumerable: true }, abc: { enumerable: true } });
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'Static'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(Static.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(Static.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: Static,
  expose: {
    Window: { Static }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/Static.js\\");
"
`;

exports[`Storage.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class Storage {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  key(index) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'key' on 'Storage': 1 argument required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"unsigned long\\"](curArg, { context: \\"Failed to execute 'key' on 'Storage': parameter 1\\" });
      args.push(curArg);
    }
    return this[impl].key(...args);
  }

  getItem(key) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'getItem' on 'Storage': 1 argument required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"DOMString\\"](curArg, { context: \\"Failed to execute 'getItem' on 'Storage': parameter 1\\" });
      args.push(curArg);
    }
    return this[impl].getItem(...args);
  }

  setItem(key, value) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 2) {
      throw new TypeError(
        \\"Failed to execute 'setItem' on 'Storage': 2 arguments required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"DOMString\\"](curArg, { context: \\"Failed to execute 'setItem' on 'Storage': parameter 1\\" });
      args.push(curArg);
    }
    {
      let curArg = arguments[1];
      curArg = conversions[\\"DOMString\\"](curArg, { context: \\"Failed to execute 'setItem' on 'Storage': parameter 2\\" });
      args.push(curArg);
    }
    return this[impl].setItem(...args);
  }

  removeItem(key) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'removeItem' on 'Storage': 1 argument required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"DOMString\\"](curArg, {
        context: \\"Failed to execute 'removeItem' on 'Storage': parameter 1\\"
      });
      args.push(curArg);
    }
    return this[impl].removeItem(...args);
  }

  clear() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].clear();
  }

  get length() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"length\\"];
  }
}
Object.defineProperties(Storage.prototype, {
  key: { enumerable: true },
  getItem: { enumerable: true },
  setItem: { enumerable: true },
  removeItem: { enumerable: true },
  clear: { enumerable: true },
  length: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"Storage\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'Storage'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(Storage.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(Storage.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj = new Proxy(obj, {
      get(target, P, receiver) {
        if (typeof P === \\"symbol\\") {
          return Reflect.get(target, P, receiver);
        }
        const desc = this.getOwnPropertyDescriptor(target, P);
        if (desc === undefined) {
          const parent = Object.getPrototypeOf(target);
          if (parent === null) {
            return undefined;
          }
          return Reflect.get(target, P, receiver);
        }
        if (!desc.get && !desc.set) {
          return desc.value;
        }
        const getter = desc.get;
        if (getter === undefined) {
          return undefined;
        }
        return Reflect.apply(getter, receiver, []);
      },

      has(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.has(target, P);
        }
        const desc = this.getOwnPropertyDescriptor(target, P);
        if (desc !== undefined) {
          return true;
        }
        const parent = Object.getPrototypeOf(target);
        if (parent !== null) {
          return Reflect.has(parent, P);
        }
        return false;
      },

      ownKeys(target) {
        const keys = new Set();

        for (const key of target[impl][utils.supportedPropertyNames]) {
          if (!(key in target)) {
            keys.add(\`\${key}\`);
          }
        }

        for (const key of Reflect.ownKeys(target)) {
          keys.add(key);
        }
        return [...keys];
      },

      getOwnPropertyDescriptor(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.getOwnPropertyDescriptor(target, P);
        }
        let ignoreNamedProps = false;

        if (target[impl][utils.supportsPropertyName](P) && !(P in target) && !ignoreNamedProps) {
          const namedValue = target[impl].getItem(P);

          return {
            writable: true,
            enumerable: true,
            configurable: true,
            value: utils.tryWrapperForImpl(namedValue)
          };
        }

        return Reflect.getOwnPropertyDescriptor(target, P);
      },

      set(target, P, V, receiver) {
        if (typeof P === \\"symbol\\") {
          return Reflect.set(target, P, V, receiver);
        }
        if (target === receiver) {
          if (typeof P === \\"string\\" && !utils.isArrayIndexPropName(P)) {
            let namedValue = V;

            namedValue = conversions[\\"DOMString\\"](namedValue, {
              context: \\"Failed to set the '\\" + P + \\"' property on 'Storage': The provided value\\"
            });

            target[impl].setItem(P, namedValue);

            return true;
          }
        }
        let ownDesc;

        if (ownDesc === undefined) {
          ownDesc = Reflect.getOwnPropertyDescriptor(target, P);
        }
        if (ownDesc === undefined) {
          const parent = Reflect.getPrototypeOf(target);
          if (parent !== null) {
            return Reflect.set(parent, P, V, receiver);
          }
          ownDesc = { writable: true, enumerable: true, configurable: true, value: undefined };
        }
        if (!ownDesc.writable) {
          return false;
        }
        if (!utils.isObject(receiver)) {
          return false;
        }
        const existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);
        let valueDesc;
        if (existingDesc !== undefined) {
          if (existingDesc.get || existingDesc.set) {
            return false;
          }
          if (!existingDesc.writable) {
            return false;
          }
          valueDesc = { value: V };
        } else {
          valueDesc = { writable: true, enumerable: true, configurable: true, value: V };
        }
        return Reflect.defineProperty(receiver, P, valueDesc);
      },

      defineProperty(target, P, desc) {
        if (typeof P === \\"symbol\\") {
          return Reflect.defineProperty(target, P, desc);
        }
        if (!utils.hasOwn(target, P)) {
          if (desc.get || desc.set) {
            return false;
          }

          let namedValue = desc.value;

          namedValue = conversions[\\"DOMString\\"](namedValue, {
            context: \\"Failed to set the '\\" + P + \\"' property on 'Storage': The provided value\\"
          });

          target[impl].setItem(P, namedValue);

          return true;
        }
        return Reflect.defineProperty(target, P, desc);
      },

      deleteProperty(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.deleteProperty(target, P);
        }

        if (target[impl][utils.supportsPropertyName](P) && !(P in target)) {
          target[impl].removeItem(P);
          return true;
        }

        return Reflect.deleteProperty(target, P);
      },

      preventExtensions() {
        return false;
      }
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: Storage,
  expose: {
    Window: { Storage }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/Storage.js\\");
"
`;

exports[`StringifierAttribute.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class StringifierAttribute {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  get attr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"attr\\"];
  }

  toString() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }
    return this[impl][\\"attr\\"];
  }
}
Object.defineProperties(StringifierAttribute.prototype, {
  attr: { enumerable: true },
  toString: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"StringifierAttribute\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'StringifierAttribute'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(StringifierAttribute.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(StringifierAttribute.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: StringifierAttribute,
  expose: {
    Window: { StringifierAttribute }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/StringifierAttribute.js\\");
"
`;

exports[`StringifierDefaultOperation.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class StringifierDefaultOperation {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  toString() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].toString();
  }
}
Object.defineProperties(StringifierDefaultOperation.prototype, {
  toString: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"StringifierDefaultOperation\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'StringifierDefaultOperation'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(StringifierDefaultOperation.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(StringifierDefaultOperation.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: StringifierDefaultOperation,
  expose: {
    Window: { StringifierDefaultOperation }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/StringifierDefaultOperation.js\\");
"
`;

exports[`StringifierNamedOperation.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class StringifierNamedOperation {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  operation() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].operation();
  }

  toString() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].operation();
  }
}
Object.defineProperties(StringifierNamedOperation.prototype, {
  operation: { enumerable: true },
  toString: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"StringifierNamedOperation\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'StringifierNamedOperation'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(StringifierNamedOperation.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(StringifierNamedOperation.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: StringifierNamedOperation,
  expose: {
    Window: { StringifierNamedOperation }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/StringifierNamedOperation.js\\");
"
`;

exports[`StringifierOperation.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class StringifierOperation {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  toString() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].toString();
  }
}
Object.defineProperties(StringifierOperation.prototype, {
  toString: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"StringifierOperation\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'StringifierOperation'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(StringifierOperation.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(StringifierOperation.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: StringifierOperation,
  expose: {
    Window: { StringifierOperation }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/StringifierOperation.js\\");
"
`;

exports[`TypedefsAndUnions.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const convertRequestDestination = require(\\"./RequestDestination.js\\").convert;
const isURL = require(\\"./URL.js\\").is;
const convertURL = require(\\"./URL.js\\").convert;
const impl = utils.implSymbol;

class TypedefsAndUnions {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  numOrStrConsumer(a) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'numOrStrConsumer' on 'TypedefsAndUnions': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (typeof curArg === \\"number\\") {
        curArg = conversions[\\"double\\"](curArg, {
          context: \\"Failed to execute 'numOrStrConsumer' on 'TypedefsAndUnions': parameter 1\\",
          clamp: true
        });
      } else {
        curArg = conversions[\\"DOMString\\"](curArg, {
          context: \\"Failed to execute 'numOrStrConsumer' on 'TypedefsAndUnions': parameter 1\\"
        });
      }
      args.push(curArg);
    }
    return this[impl].numOrStrConsumer(...args);
  }

  numOrEnumConsumer(a) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'numOrEnumConsumer' on 'TypedefsAndUnions': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (curArg === null || curArg === undefined) {
        curArg = null;
      } else {
        if (typeof curArg === \\"number\\") {
          curArg = conversions[\\"double\\"](curArg, {
            context: \\"Failed to execute 'numOrEnumConsumer' on 'TypedefsAndUnions': parameter 1\\"
          });
        } else {
          curArg = convertRequestDestination(curArg, {
            context: \\"Failed to execute 'numOrEnumConsumer' on 'TypedefsAndUnions': parameter 1\\"
          });
        }
      }
      args.push(curArg);
    }
    return this[impl].numOrEnumConsumer(...args);
  }

  numOrStrOrNullConsumer(a) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'numOrStrOrNullConsumer' on 'TypedefsAndUnions': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (curArg === null || curArg === undefined) {
        curArg = null;
      } else {
        if (typeof curArg === \\"number\\") {
          curArg = conversions[\\"double\\"](curArg, {
            context: \\"Failed to execute 'numOrStrOrNullConsumer' on 'TypedefsAndUnions': parameter 1\\",
            clamp: true,
            enforceRange: true
          });
        } else {
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'numOrStrOrNullConsumer' on 'TypedefsAndUnions': parameter 1\\",
            enforceRange: true
          });
        }
      }
      args.push(curArg);
    }
    return this[impl].numOrStrOrNullConsumer(...args);
  }

  numOrStrOrURLOrNullConsumer(a) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'numOrStrOrURLOrNullConsumer' on 'TypedefsAndUnions': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (curArg === null || curArg === undefined) {
        curArg = null;
      } else {
        if (isURL(curArg)) {
          curArg = utils.implForWrapper(curArg);
        } else if (typeof curArg === \\"number\\") {
          curArg = conversions[\\"double\\"](curArg, {
            context: \\"Failed to execute 'numOrStrOrURLOrNullConsumer' on 'TypedefsAndUnions': parameter 1\\",
            clamp: true,
            enforceRange: true
          });
        } else {
          curArg = conversions[\\"DOMString\\"](curArg, {
            context: \\"Failed to execute 'numOrStrOrURLOrNullConsumer' on 'TypedefsAndUnions': parameter 1\\",
            enforceRange: true
          });
        }
      }
      args.push(curArg);
    }
    return this[impl].numOrStrOrURLOrNullConsumer(...args);
  }

  urlMapInnerConsumer(a) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'urlMapInnerConsumer' on 'TypedefsAndUnions': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (!utils.isObject(curArg)) {
        throw new TypeError(
          \\"Failed to execute 'urlMapInnerConsumer' on 'TypedefsAndUnions': parameter 1\\" + \\" is not an object.\\"
        );
      } else {
        const result = Object.create(null);
        for (const key of Reflect.ownKeys(curArg)) {
          const desc = Object.getOwnPropertyDescriptor(curArg, key);
          if (desc && desc.enumerable) {
            let typedKey = key;
            let typedValue = curArg[key];

            typedKey = conversions[\\"USVString\\"](typedKey, {
              context: \\"Failed to execute 'urlMapInnerConsumer' on 'TypedefsAndUnions': parameter 1\\" + \\"'s key\\"
            });

            typedValue = convertURL(typedValue, {
              context: \\"Failed to execute 'urlMapInnerConsumer' on 'TypedefsAndUnions': parameter 1\\" + \\"'s value\\"
            });

            result[typedKey] = typedValue;
          }
        }
        curArg = result;
      }
      args.push(curArg);
    }
    return this[impl].urlMapInnerConsumer(...args);
  }

  urlMapConsumer(a) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'urlMapConsumer' on 'TypedefsAndUnions': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (curArg === null || curArg === undefined) {
        curArg = null;
      } else {
        if (!utils.isObject(curArg)) {
          throw new TypeError(
            \\"Failed to execute 'urlMapConsumer' on 'TypedefsAndUnions': parameter 1\\" + \\" is not an object.\\"
          );
        } else {
          const result = Object.create(null);
          for (const key of Reflect.ownKeys(curArg)) {
            const desc = Object.getOwnPropertyDescriptor(curArg, key);
            if (desc && desc.enumerable) {
              let typedKey = key;
              let typedValue = curArg[key];

              typedKey = conversions[\\"USVString\\"](typedKey, {
                context: \\"Failed to execute 'urlMapConsumer' on 'TypedefsAndUnions': parameter 1\\" + \\"'s key\\"
              });

              typedValue = convertURL(typedValue, {
                context: \\"Failed to execute 'urlMapConsumer' on 'TypedefsAndUnions': parameter 1\\" + \\"'s value\\"
              });

              result[typedKey] = typedValue;
            }
          }
          curArg = result;
        }
      }
      args.push(curArg);
    }
    return this[impl].urlMapConsumer(...args);
  }

  bufferSourceOrURLConsumer(b) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'bufferSourceOrURLConsumer' on 'TypedefsAndUnions': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (isURL(curArg)) {
        curArg = utils.implForWrapper(curArg);
      } else if (curArg instanceof ArrayBuffer) {
      } else if (ArrayBuffer.isView(curArg)) {
      } else {
        throw new TypeError(
          \\"Failed to execute 'bufferSourceOrURLConsumer' on 'TypedefsAndUnions': parameter 1\\" +
            \\" is not of any supported type.\\"
        );
      }
      args.push(curArg);
    }
    return this[impl].bufferSourceOrURLConsumer(...args);
  }

  arrayBufferViewOrURLMapConsumer(b) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'arrayBufferViewOrURLMapConsumer' on 'TypedefsAndUnions': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (curArg === null || curArg === undefined) {
        curArg = null;
      } else {
        if (ArrayBuffer.isView(curArg)) {
        } else if (utils.isObject(curArg)) {
          if (!utils.isObject(curArg)) {
            throw new TypeError(
              \\"Failed to execute 'arrayBufferViewOrURLMapConsumer' on 'TypedefsAndUnions': parameter 1\\" +
                \\" record\\" +
                \\" is not an object.\\"
            );
          } else {
            const result = Object.create(null);
            for (const key of Reflect.ownKeys(curArg)) {
              const desc = Object.getOwnPropertyDescriptor(curArg, key);
              if (desc && desc.enumerable) {
                let typedKey = key;
                let typedValue = curArg[key];

                typedKey = conversions[\\"USVString\\"](typedKey, {
                  context:
                    \\"Failed to execute 'arrayBufferViewOrURLMapConsumer' on 'TypedefsAndUnions': parameter 1\\" +
                    \\" record\\" +
                    \\"'s key\\"
                });

                typedValue = convertURL(typedValue, {
                  context:
                    \\"Failed to execute 'arrayBufferViewOrURLMapConsumer' on 'TypedefsAndUnions': parameter 1\\" +
                    \\" record\\" +
                    \\"'s value\\"
                });

                result[typedKey] = typedValue;
              }
            }
            curArg = result;
          }
        } else {
          throw new TypeError(
            \\"Failed to execute 'arrayBufferViewOrURLMapConsumer' on 'TypedefsAndUnions': parameter 1\\" +
              \\" is not of any supported type.\\"
          );
        }
      }
      args.push(curArg);
    }
    return this[impl].arrayBufferViewOrURLMapConsumer(...args);
  }

  arrayBufferViewDupConsumer(b) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'arrayBufferViewDupConsumer' on 'TypedefsAndUnions': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (ArrayBuffer.isView(curArg)) {
      } else {
        throw new TypeError(
          \\"Failed to execute 'arrayBufferViewDupConsumer' on 'TypedefsAndUnions': parameter 1\\" +
            \\" is not of any supported type.\\"
        );
      }
      args.push(curArg);
    }
    return this[impl].arrayBufferViewDupConsumer(...args);
  }

  get buf() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return utils.tryWrapperForImpl(this[impl][\\"buf\\"]);
  }

  set buf(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (V instanceof ArrayBuffer) {
    } else if (ArrayBuffer.isView(V) && (V instanceof Uint8Array || V instanceof Uint16Array)) {
    } else {
      throw new TypeError(
        \\"Failed to set the 'buf' property on 'TypedefsAndUnions': The provided value\\" + \\" is not of any supported type.\\"
      );
    }
    this[impl][\\"buf\\"] = V;
  }

  get time() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"time\\"];
  }

  set time(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"unsigned long long\\"](V, {
      context: \\"Failed to set the 'time' property on 'TypedefsAndUnions': The provided value\\"
    });

    this[impl][\\"time\\"] = V;
  }
}
Object.defineProperties(TypedefsAndUnions.prototype, {
  numOrStrConsumer: { enumerable: true },
  numOrEnumConsumer: { enumerable: true },
  numOrStrOrNullConsumer: { enumerable: true },
  numOrStrOrURLOrNullConsumer: { enumerable: true },
  urlMapInnerConsumer: { enumerable: true },
  urlMapConsumer: { enumerable: true },
  bufferSourceOrURLConsumer: { enumerable: true },
  arrayBufferViewOrURLMapConsumer: { enumerable: true },
  arrayBufferViewDupConsumer: { enumerable: true },
  buf: { enumerable: true },
  time: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"TypedefsAndUnions\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'TypedefsAndUnions'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(TypedefsAndUnions.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(TypedefsAndUnions.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: TypedefsAndUnions,
  expose: {
    Window: { TypedefsAndUnions }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/TypedefsAndUnions.js\\");
"
`;

exports[`URL.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class URL {
  constructor(url) {
    if (arguments.length < 1) {
      throw new TypeError(\\"Failed to construct 'URL': 1 argument required, but only \\" + arguments.length + \\" present.\\");
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"USVString\\"](curArg, { context: \\"Failed to construct 'URL': parameter 1\\" });
      args.push(curArg);
    }
    {
      let curArg = arguments[1];
      if (curArg !== undefined) {
        curArg = conversions[\\"USVString\\"](curArg, { context: \\"Failed to construct 'URL': parameter 2\\" });
      }
      args.push(curArg);
    }
    return iface.setup(Object.create(new.target.prototype), args);
  }

  toJSON() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].toJSON();
  }

  get href() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"href\\"];
  }

  set href(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'href' property on 'URL': The provided value\\" });

    this[impl][\\"href\\"] = V;
  }

  toString() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }
    return this[impl][\\"href\\"];
  }

  get origin() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"origin\\"];
  }

  get protocol() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"protocol\\"];
  }

  set protocol(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'protocol' property on 'URL': The provided value\\" });

    this[impl][\\"protocol\\"] = V;
  }

  get username() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"username\\"];
  }

  set username(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'username' property on 'URL': The provided value\\" });

    this[impl][\\"username\\"] = V;
  }

  get password() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"password\\"];
  }

  set password(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'password' property on 'URL': The provided value\\" });

    this[impl][\\"password\\"] = V;
  }

  get host() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"host\\"];
  }

  set host(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'host' property on 'URL': The provided value\\" });

    this[impl][\\"host\\"] = V;
  }

  get hostname() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"hostname\\"];
  }

  set hostname(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'hostname' property on 'URL': The provided value\\" });

    this[impl][\\"hostname\\"] = V;
  }

  get port() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"port\\"];
  }

  set port(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'port' property on 'URL': The provided value\\" });

    this[impl][\\"port\\"] = V;
  }

  get pathname() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"pathname\\"];
  }

  set pathname(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'pathname' property on 'URL': The provided value\\" });

    this[impl][\\"pathname\\"] = V;
  }

  get search() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"search\\"];
  }

  set search(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'search' property on 'URL': The provided value\\" });

    this[impl][\\"search\\"] = V;
  }

  get searchParams() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return utils.getSameObject(this, \\"searchParams\\", () => {
      return utils.tryWrapperForImpl(this[impl][\\"searchParams\\"]);
    });
  }

  get hash() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"hash\\"];
  }

  set hash(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'hash' property on 'URL': The provided value\\" });

    this[impl][\\"hash\\"] = V;
  }
}
Object.defineProperties(URL.prototype, {
  toJSON: { enumerable: true },
  href: { enumerable: true },
  toString: { enumerable: true },
  origin: { enumerable: true },
  protocol: { enumerable: true },
  username: { enumerable: true },
  password: { enumerable: true },
  host: { enumerable: true },
  hostname: { enumerable: true },
  port: { enumerable: true },
  pathname: { enumerable: true },
  search: { enumerable: true },
  searchParams: { enumerable: true },
  hash: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"URL\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'URL'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(URL.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(URL.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: URL,
  expose: {
    Window: { URL },
    Worker: { URL }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/URL.js\\");
"
`;

exports[`URLList.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class URLList {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  item(index) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'item' on 'URLList': 1 argument required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"unsigned long\\"](curArg, { context: \\"Failed to execute 'item' on 'URLList': parameter 1\\" });
      args.push(curArg);
    }
    return utils.tryWrapperForImpl(this[impl].item(...args));
  }

  get length() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"length\\"];
  }
}
Object.defineProperties(URLList.prototype, {
  item: { enumerable: true },
  length: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"URLList\\", configurable: true },
  [Symbol.iterator]: { value: Array.prototype[Symbol.iterator], configurable: true, writable: true },
  keys: { value: Array.prototype.keys, configurable: true, enumerable: true, writable: true },
  values: { value: Array.prototype[Symbol.iterator], configurable: true, enumerable: true, writable: true },
  entries: { value: Array.prototype.entries, configurable: true, enumerable: true, writable: true },
  forEach: { value: Array.prototype.forEach, configurable: true, enumerable: true, writable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'URLList'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(URLList.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(URLList.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj = new Proxy(obj, {
      get(target, P, receiver) {
        if (typeof P === \\"symbol\\") {
          return Reflect.get(target, P, receiver);
        }
        const desc = this.getOwnPropertyDescriptor(target, P);
        if (desc === undefined) {
          const parent = Object.getPrototypeOf(target);
          if (parent === null) {
            return undefined;
          }
          return Reflect.get(target, P, receiver);
        }
        if (!desc.get && !desc.set) {
          return desc.value;
        }
        const getter = desc.get;
        if (getter === undefined) {
          return undefined;
        }
        return Reflect.apply(getter, receiver, []);
      },

      has(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.has(target, P);
        }
        const desc = this.getOwnPropertyDescriptor(target, P);
        if (desc !== undefined) {
          return true;
        }
        const parent = Object.getPrototypeOf(target);
        if (parent !== null) {
          return Reflect.has(parent, P);
        }
        return false;
      },

      ownKeys(target) {
        const keys = new Set();

        for (const key of target[impl][utils.supportedPropertyIndices]) {
          keys.add(\`\${key}\`);
        }

        for (const key of Reflect.ownKeys(target)) {
          keys.add(key);
        }
        return [...keys];
      },

      getOwnPropertyDescriptor(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.getOwnPropertyDescriptor(target, P);
        }
        let ignoreNamedProps = false;

        if (utils.isArrayIndexPropName(P)) {
          const index = P >>> 0;

          if (target[impl][utils.supportsPropertyIndex](index)) {
            const indexedValue = target[impl].item(index);
            return {
              writable: false,
              enumerable: true,
              configurable: true,
              value: utils.tryWrapperForImpl(indexedValue)
            };
          }
          ignoreNamedProps = true;
        }

        return Reflect.getOwnPropertyDescriptor(target, P);
      },

      set(target, P, V, receiver) {
        if (typeof P === \\"symbol\\") {
          return Reflect.set(target, P, V, receiver);
        }
        if (target === receiver) {
          utils.isArrayIndexPropName(P);
        }
        let ownDesc;

        if (utils.isArrayIndexPropName(P)) {
          const index = P >>> 0;

          if (target[impl][utils.supportsPropertyIndex](index)) {
            const indexedValue = target[impl].item(index);
            ownDesc = {
              writable: false,
              enumerable: true,
              configurable: true,
              value: utils.tryWrapperForImpl(indexedValue)
            };
          }
        }

        if (ownDesc === undefined) {
          ownDesc = Reflect.getOwnPropertyDescriptor(target, P);
        }
        if (ownDesc === undefined) {
          const parent = Reflect.getPrototypeOf(target);
          if (parent !== null) {
            return Reflect.set(parent, P, V, receiver);
          }
          ownDesc = { writable: true, enumerable: true, configurable: true, value: undefined };
        }
        if (!ownDesc.writable) {
          return false;
        }
        if (!utils.isObject(receiver)) {
          return false;
        }
        const existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);
        let valueDesc;
        if (existingDesc !== undefined) {
          if (existingDesc.get || existingDesc.set) {
            return false;
          }
          if (!existingDesc.writable) {
            return false;
          }
          valueDesc = { value: V };
        } else {
          valueDesc = { writable: true, enumerable: true, configurable: true, value: V };
        }
        return Reflect.defineProperty(receiver, P, valueDesc);
      },

      defineProperty(target, P, desc) {
        if (typeof P === \\"symbol\\") {
          return Reflect.defineProperty(target, P, desc);
        }

        if (utils.isArrayIndexPropName(P)) {
          return false;
        }

        return Reflect.defineProperty(target, P, desc);
      },

      deleteProperty(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.deleteProperty(target, P);
        }

        if (utils.isArrayIndexPropName(P)) {
          const index = P >>> 0;
          return !target[impl][utils.supportsPropertyIndex](index);
        }

        return Reflect.deleteProperty(target, P);
      },

      preventExtensions() {
        return false;
      }
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: URLList,
  expose: {
    Window: { URLList }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/URLList.js\\");
"
`;

exports[`URLSearchParams.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

const IteratorPrototype = Object.create(utils.IteratorPrototype, {
  next: {
    value: function next() {
      const internal = this[utils.iterInternalSymbol];
      const { target, kind, index } = internal;
      const values = Array.from(target[impl]);
      const len = values.length;
      if (index >= len) {
        return { value: undefined, done: true };
      }

      const pair = values[index];
      internal.index = index + 1;
      const [key, value] = pair.map(utils.tryWrapperForImpl);

      let result;
      switch (kind) {
        case \\"key\\":
          result = key;
          break;
        case \\"value\\":
          result = value;
          break;
        case \\"key+value\\":
          result = [key, value];
          break;
      }
      return { value: result, done: false };
    },
    writable: true,
    enumerable: true,
    configurable: true
  },
  [Symbol.toStringTag]: {
    value: \\"URLSearchParams Iterator\\",
    configurable: true
  }
});
class URLSearchParams {
  constructor() {
    const args = [];
    {
      let curArg = arguments[0];
      if (curArg !== undefined) {
        if (utils.isObject(curArg)) {
          if (curArg[Symbol.iterator] !== undefined) {
            if (!utils.isObject(curArg)) {
              throw new TypeError(
                \\"Failed to construct 'URLSearchParams': parameter 1\\" + \\" sequence\\" + \\" is not an iterable object.\\"
              );
            } else {
              const V = [];
              const tmp = curArg;
              for (let nextItem of tmp) {
                if (!utils.isObject(nextItem)) {
                  throw new TypeError(
                    \\"Failed to construct 'URLSearchParams': parameter 1\\" +
                      \\" sequence\\" +
                      \\"'s element\\" +
                      \\" is not an iterable object.\\"
                  );
                } else {
                  const V = [];
                  const tmp = nextItem;
                  for (let nextItem of tmp) {
                    nextItem = conversions[\\"USVString\\"](nextItem, {
                      context:
                        \\"Failed to construct 'URLSearchParams': parameter 1\\" + \\" sequence\\" + \\"'s element\\" + \\"'s element\\"
                    });

                    V.push(nextItem);
                  }
                  nextItem = V;
                }

                V.push(nextItem);
              }
              curArg = V;
            }
          } else {
            if (!utils.isObject(curArg)) {
              throw new TypeError(
                \\"Failed to construct 'URLSearchParams': parameter 1\\" + \\" record\\" + \\" is not an object.\\"
              );
            } else {
              const result = Object.create(null);
              for (const key of Reflect.ownKeys(curArg)) {
                const desc = Object.getOwnPropertyDescriptor(curArg, key);
                if (desc && desc.enumerable) {
                  let typedKey = key;
                  let typedValue = curArg[key];

                  typedKey = conversions[\\"USVString\\"](typedKey, {
                    context: \\"Failed to construct 'URLSearchParams': parameter 1\\" + \\" record\\" + \\"'s key\\"
                  });

                  typedValue = conversions[\\"USVString\\"](typedValue, {
                    context: \\"Failed to construct 'URLSearchParams': parameter 1\\" + \\" record\\" + \\"'s value\\"
                  });

                  result[typedKey] = typedValue;
                }
              }
              curArg = result;
            }
          }
        } else {
          curArg = conversions[\\"USVString\\"](curArg, { context: \\"Failed to construct 'URLSearchParams': parameter 1\\" });
        }
      } else {
        curArg = \\"\\";
      }
      args.push(curArg);
    }
    return iface.setup(Object.create(new.target.prototype), args);
  }

  append(name, value) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 2) {
      throw new TypeError(
        \\"Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"USVString\\"](curArg, {
        context: \\"Failed to execute 'append' on 'URLSearchParams': parameter 1\\"
      });
      args.push(curArg);
    }
    {
      let curArg = arguments[1];
      curArg = conversions[\\"USVString\\"](curArg, {
        context: \\"Failed to execute 'append' on 'URLSearchParams': parameter 2\\"
      });
      args.push(curArg);
    }
    return this[impl].append(...args);
  }

  delete(name) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"USVString\\"](curArg, {
        context: \\"Failed to execute 'delete' on 'URLSearchParams': parameter 1\\"
      });
      args.push(curArg);
    }
    return this[impl].delete(...args);
  }

  get(name) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"USVString\\"](curArg, {
        context: \\"Failed to execute 'get' on 'URLSearchParams': parameter 1\\"
      });
      args.push(curArg);
    }
    return this[impl].get(...args);
  }

  getAll(name) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"USVString\\"](curArg, {
        context: \\"Failed to execute 'getAll' on 'URLSearchParams': parameter 1\\"
      });
      args.push(curArg);
    }
    return utils.tryWrapperForImpl(this[impl].getAll(...args));
  }

  has(name) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"USVString\\"](curArg, {
        context: \\"Failed to execute 'has' on 'URLSearchParams': parameter 1\\"
      });
      args.push(curArg);
    }
    return this[impl].has(...args);
  }

  set(name, value) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 2) {
      throw new TypeError(
        \\"Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"USVString\\"](curArg, {
        context: \\"Failed to execute 'set' on 'URLSearchParams': parameter 1\\"
      });
      args.push(curArg);
    }
    {
      let curArg = arguments[1];
      curArg = conversions[\\"USVString\\"](curArg, {
        context: \\"Failed to execute 'set' on 'URLSearchParams': parameter 2\\"
      });
      args.push(curArg);
    }
    return this[impl].set(...args);
  }

  sort() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].sort();
  }

  toString() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].toString();
  }

  keys() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }
    return module.exports.createDefaultIterator(this, \\"key\\");
  }

  values() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }
    return module.exports.createDefaultIterator(this, \\"value\\");
  }

  entries() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }
    return module.exports.createDefaultIterator(this, \\"key+value\\");
  }

  forEach(callback) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }
    if (arguments.length < 1) {
      throw new TypeError(\\"Failed to execute 'forEach' on 'iterable': 1 argument required, \\" + \\"but only 0 present.\\");
    }
    if (typeof callback !== \\"function\\") {
      throw new TypeError(
        \\"Failed to execute 'forEach' on 'iterable': The callback provided \\" + \\"as parameter 1 is not a function.\\"
      );
    }
    const thisArg = arguments[1];
    let pairs = Array.from(this[impl]);
    let i = 0;
    while (i < pairs.length) {
      const [key, value] = pairs[i].map(utils.tryWrapperForImpl);
      callback.call(thisArg, value, key, this);
      pairs = Array.from(this[impl]);
      i++;
    }
  }
}
Object.defineProperties(URLSearchParams.prototype, {
  append: { enumerable: true },
  delete: { enumerable: true },
  get: { enumerable: true },
  getAll: { enumerable: true },
  has: { enumerable: true },
  set: { enumerable: true },
  sort: { enumerable: true },
  toString: { enumerable: true },
  keys: { enumerable: true },
  values: { enumerable: true },
  entries: { enumerable: true },
  forEach: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"URLSearchParams\\", configurable: true },
  [Symbol.iterator]: { value: URLSearchParams.prototype.entries, configurable: true, writable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'URLSearchParams'.\`);
  },

  createDefaultIterator(target, kind) {
    const iterator = Object.create(IteratorPrototype);
    Object.defineProperty(iterator, utils.iterInternalSymbol, {
      value: { target, kind, index: 0 },
      configurable: true
    });
    return iterator;
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(URLSearchParams.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(URLSearchParams.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: URLSearchParams,
  expose: {
    Window: { URLSearchParams },
    Worker: { URLSearchParams }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/URLSearchParams.js\\");
"
`;

exports[`URLSearchParamsCollection.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class URLSearchParamsCollection {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  item(index) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'item' on 'URLSearchParamsCollection': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"unsigned long\\"](curArg, {
        context: \\"Failed to execute 'item' on 'URLSearchParamsCollection': parameter 1\\"
      });
      args.push(curArg);
    }
    return utils.tryWrapperForImpl(this[impl].item(...args));
  }

  namedItem(name) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'namedItem' on 'URLSearchParamsCollection': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"DOMString\\"](curArg, {
        context: \\"Failed to execute 'namedItem' on 'URLSearchParamsCollection': parameter 1\\"
      });
      args.push(curArg);
    }
    return utils.tryWrapperForImpl(this[impl].namedItem(...args));
  }

  get length() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"length\\"];
  }
}
Object.defineProperties(URLSearchParamsCollection.prototype, {
  item: { enumerable: true },
  namedItem: { enumerable: true },
  length: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"URLSearchParamsCollection\\", configurable: true },
  [Symbol.iterator]: { value: Array.prototype[Symbol.iterator], configurable: true, writable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'URLSearchParamsCollection'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(URLSearchParamsCollection.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(URLSearchParamsCollection.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj = new Proxy(obj, {
      get(target, P, receiver) {
        if (typeof P === \\"symbol\\") {
          return Reflect.get(target, P, receiver);
        }
        const desc = this.getOwnPropertyDescriptor(target, P);
        if (desc === undefined) {
          const parent = Object.getPrototypeOf(target);
          if (parent === null) {
            return undefined;
          }
          return Reflect.get(target, P, receiver);
        }
        if (!desc.get && !desc.set) {
          return desc.value;
        }
        const getter = desc.get;
        if (getter === undefined) {
          return undefined;
        }
        return Reflect.apply(getter, receiver, []);
      },

      has(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.has(target, P);
        }
        const desc = this.getOwnPropertyDescriptor(target, P);
        if (desc !== undefined) {
          return true;
        }
        const parent = Object.getPrototypeOf(target);
        if (parent !== null) {
          return Reflect.has(parent, P);
        }
        return false;
      },

      ownKeys(target) {
        const keys = new Set();

        for (const key of target[impl][utils.supportedPropertyIndices]) {
          keys.add(\`\${key}\`);
        }

        for (const key of target[impl][utils.supportedPropertyNames]) {
          if (!(key in target)) {
            keys.add(\`\${key}\`);
          }
        }

        for (const key of Reflect.ownKeys(target)) {
          keys.add(key);
        }
        return [...keys];
      },

      getOwnPropertyDescriptor(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.getOwnPropertyDescriptor(target, P);
        }
        let ignoreNamedProps = false;

        if (utils.isArrayIndexPropName(P)) {
          const index = P >>> 0;
          const indexedValue = target[impl].item(index);
          if (indexedValue !== undefined) {
            return {
              writable: false,
              enumerable: true,
              configurable: true,
              value: utils.tryWrapperForImpl(indexedValue)
            };
          }
          ignoreNamedProps = true;
        }

        const namedValue = target[impl].namedItem(P);

        if (namedValue !== null && !(P in target) && !ignoreNamedProps) {
          return {
            writable: false,
            enumerable: false,
            configurable: true,
            value: utils.tryWrapperForImpl(namedValue)
          };
        }

        return Reflect.getOwnPropertyDescriptor(target, P);
      },

      set(target, P, V, receiver) {
        if (typeof P === \\"symbol\\") {
          return Reflect.set(target, P, V, receiver);
        }
        if (target === receiver) {
          utils.isArrayIndexPropName(P);

          typeof P === \\"string\\" && !utils.isArrayIndexPropName(P);
        }
        let ownDesc;

        if (utils.isArrayIndexPropName(P)) {
          const index = P >>> 0;
          const indexedValue = target[impl].item(index);
          if (indexedValue !== undefined) {
            ownDesc = {
              writable: false,
              enumerable: true,
              configurable: true,
              value: utils.tryWrapperForImpl(indexedValue)
            };
          }
        }

        if (ownDesc === undefined) {
          ownDesc = Reflect.getOwnPropertyDescriptor(target, P);
        }
        if (ownDesc === undefined) {
          const parent = Reflect.getPrototypeOf(target);
          if (parent !== null) {
            return Reflect.set(parent, P, V, receiver);
          }
          ownDesc = { writable: true, enumerable: true, configurable: true, value: undefined };
        }
        if (!ownDesc.writable) {
          return false;
        }
        if (!utils.isObject(receiver)) {
          return false;
        }
        const existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);
        let valueDesc;
        if (existingDesc !== undefined) {
          if (existingDesc.get || existingDesc.set) {
            return false;
          }
          if (!existingDesc.writable) {
            return false;
          }
          valueDesc = { value: V };
        } else {
          valueDesc = { writable: true, enumerable: true, configurable: true, value: V };
        }
        return Reflect.defineProperty(receiver, P, valueDesc);
      },

      defineProperty(target, P, desc) {
        if (typeof P === \\"symbol\\") {
          return Reflect.defineProperty(target, P, desc);
        }

        if (utils.isArrayIndexPropName(P)) {
          return false;
        }
        if (!utils.hasOwn(target, P)) {
          const creating = !(target[impl].namedItem(P) !== null);
          if (!creating) {
            return false;
          }
        }
        return Reflect.defineProperty(target, P, desc);
      },

      deleteProperty(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.deleteProperty(target, P);
        }

        if (utils.isArrayIndexPropName(P)) {
          const index = P >>> 0;
          return !(target[impl].item(index) !== undefined);
        }

        if (target[impl].namedItem(P) !== null && !(P in target)) {
          return false;
        }

        return Reflect.deleteProperty(target, P);
      },

      preventExtensions() {
        return false;
      }
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: URLSearchParamsCollection,
  expose: {
    Window: { URLSearchParamsCollection }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/URLSearchParamsCollection.js\\");
"
`;

exports[`URLSearchParamsCollection2.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const convertURL = require(\\"./URL.js\\").convert;
const impl = utils.implSymbol;
const URLSearchParamsCollection = require(\\"./URLSearchParamsCollection.js\\");

class URLSearchParamsCollection2 extends URLSearchParamsCollection.interface {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }
}
Object.defineProperties(URLSearchParamsCollection2.prototype, {
  [Symbol.toStringTag]: { value: \\"URLSearchParamsCollection2\\", configurable: true },
  [Symbol.iterator]: { value: Array.prototype[Symbol.iterator], configurable: true, writable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'URLSearchParamsCollection2'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(URLSearchParamsCollection2.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(URLSearchParamsCollection2.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {
    URLSearchParamsCollection._internalSetup(obj);
  },
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj = new Proxy(obj, {
      get(target, P, receiver) {
        if (typeof P === \\"symbol\\") {
          return Reflect.get(target, P, receiver);
        }
        const desc = this.getOwnPropertyDescriptor(target, P);
        if (desc === undefined) {
          const parent = Object.getPrototypeOf(target);
          if (parent === null) {
            return undefined;
          }
          return Reflect.get(target, P, receiver);
        }
        if (!desc.get && !desc.set) {
          return desc.value;
        }
        const getter = desc.get;
        if (getter === undefined) {
          return undefined;
        }
        return Reflect.apply(getter, receiver, []);
      },

      has(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.has(target, P);
        }
        const desc = this.getOwnPropertyDescriptor(target, P);
        if (desc !== undefined) {
          return true;
        }
        const parent = Object.getPrototypeOf(target);
        if (parent !== null) {
          return Reflect.has(parent, P);
        }
        return false;
      },

      ownKeys(target) {
        const keys = new Set();

        for (const key of target[impl][utils.supportedPropertyIndices]) {
          keys.add(\`\${key}\`);
        }

        for (const key of target[impl][utils.supportedPropertyNames]) {
          if (!(key in target)) {
            keys.add(\`\${key}\`);
          }
        }

        for (const key of Reflect.ownKeys(target)) {
          keys.add(key);
        }
        return [...keys];
      },

      getOwnPropertyDescriptor(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.getOwnPropertyDescriptor(target, P);
        }
        let ignoreNamedProps = false;

        if (utils.isArrayIndexPropName(P)) {
          const index = P >>> 0;
          const indexedValue = target[impl].item(index);
          if (indexedValue !== undefined) {
            return {
              writable: false,
              enumerable: true,
              configurable: true,
              value: utils.tryWrapperForImpl(indexedValue)
            };
          }
          ignoreNamedProps = true;
        }

        const namedValue = target[impl].namedItem(P);

        if (namedValue !== null && !(P in target) && !ignoreNamedProps) {
          return {
            writable: true,
            enumerable: true,
            configurable: true,
            value: utils.tryWrapperForImpl(namedValue)
          };
        }

        return Reflect.getOwnPropertyDescriptor(target, P);
      },

      set(target, P, V, receiver) {
        if (typeof P === \\"symbol\\") {
          return Reflect.set(target, P, V, receiver);
        }
        if (target === receiver) {
          utils.isArrayIndexPropName(P);

          if (typeof P === \\"string\\" && !utils.isArrayIndexPropName(P)) {
            let namedValue = V;

            namedValue = convertURL(namedValue, {
              context: \\"Failed to set the '\\" + P + \\"' property on 'URLSearchParamsCollection2': The provided value\\"
            });

            const creating = !(target[impl].namedItem(P) !== null);
            if (creating) {
              target[impl][utils.namedSetNew](P, namedValue);
            } else {
              target[impl][utils.namedSetExisting](P, namedValue);
            }

            return true;
          }
        }
        let ownDesc;

        if (utils.isArrayIndexPropName(P)) {
          const index = P >>> 0;
          const indexedValue = target[impl].item(index);
          if (indexedValue !== undefined) {
            ownDesc = {
              writable: false,
              enumerable: true,
              configurable: true,
              value: utils.tryWrapperForImpl(indexedValue)
            };
          }
        }

        if (ownDesc === undefined) {
          ownDesc = Reflect.getOwnPropertyDescriptor(target, P);
        }
        if (ownDesc === undefined) {
          const parent = Reflect.getPrototypeOf(target);
          if (parent !== null) {
            return Reflect.set(parent, P, V, receiver);
          }
          ownDesc = { writable: true, enumerable: true, configurable: true, value: undefined };
        }
        if (!ownDesc.writable) {
          return false;
        }
        if (!utils.isObject(receiver)) {
          return false;
        }
        const existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);
        let valueDesc;
        if (existingDesc !== undefined) {
          if (existingDesc.get || existingDesc.set) {
            return false;
          }
          if (!existingDesc.writable) {
            return false;
          }
          valueDesc = { value: V };
        } else {
          valueDesc = { writable: true, enumerable: true, configurable: true, value: V };
        }
        return Reflect.defineProperty(receiver, P, valueDesc);
      },

      defineProperty(target, P, desc) {
        if (typeof P === \\"symbol\\") {
          return Reflect.defineProperty(target, P, desc);
        }

        if (utils.isArrayIndexPropName(P)) {
          return false;
        }
        if (!utils.hasOwn(target, P)) {
          if (desc.get || desc.set) {
            return false;
          }

          let namedValue = desc.value;

          namedValue = convertURL(namedValue, {
            context: \\"Failed to set the '\\" + P + \\"' property on 'URLSearchParamsCollection2': The provided value\\"
          });

          const creating = !(target[impl].namedItem(P) !== null);
          if (creating) {
            target[impl][utils.namedSetNew](P, namedValue);
          } else {
            target[impl][utils.namedSetExisting](P, namedValue);
          }

          return true;
        }
        return Reflect.defineProperty(target, P, desc);
      },

      deleteProperty(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.deleteProperty(target, P);
        }

        if (utils.isArrayIndexPropName(P)) {
          const index = P >>> 0;
          return !(target[impl].item(index) !== undefined);
        }

        if (target[impl].namedItem(P) !== null && !(P in target)) {
          return false;
        }

        return Reflect.deleteProperty(target, P);
      },

      preventExtensions() {
        return false;
      }
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: URLSearchParamsCollection2,
  expose: {
    Window: { URLSearchParamsCollection2 }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/URLSearchParamsCollection2.js\\");
"
`;

exports[`UnderscoredProperties.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;
const MixinMixin = require(\\"./MixinMixin.js\\");

class UnderscoredProperties {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  operation(sequence) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'operation' on 'UnderscoredProperties': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      if (!utils.isObject(curArg)) {
        throw new TypeError(
          \\"Failed to execute 'operation' on 'UnderscoredProperties': parameter 1\\" + \\" is not an iterable object.\\"
        );
      } else {
        const V = [];
        const tmp = curArg;
        for (let nextItem of tmp) {
          nextItem = conversions[\\"DOMString\\"](nextItem, {
            context: \\"Failed to execute 'operation' on 'UnderscoredProperties': parameter 1\\" + \\"'s element\\"
          });

          V.push(nextItem);
        }
        curArg = V;
      }
      args.push(curArg);
    }
    return this[impl].operation(...args);
  }

  mixinMixinOp() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl].mixinMixinOp();
  }

  get attribute() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"attribute\\"];
  }

  set attribute(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"byte\\"](V, {
      context: \\"Failed to set the 'attribute' property on 'UnderscoredProperties': The provided value\\"
    });

    this[impl][\\"attribute\\"] = V;
  }

  get mixinMixinAttr() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"mixinMixinAttr\\"];
  }

  set mixinMixinAttr(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"DOMString\\"](V, {
      context: \\"Failed to set the 'mixinMixinAttr' property on 'UnderscoredProperties': The provided value\\"
    });

    this[impl][\\"mixinMixinAttr\\"] = V;
  }

  static static(void_) {
    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'static' on 'UnderscoredProperties': 1 argument required, but only \\" +
          arguments.length +
          \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"DOMString\\"](curArg, {
        context: \\"Failed to execute 'static' on 'UnderscoredProperties': parameter 1\\"
      });
      args.push(curArg);
    }
    return Impl.implementation.static(...args);
  }
}
Object.defineProperties(UnderscoredProperties.prototype, {
  operation: { enumerable: true },
  mixinMixinOp: { enumerable: true },
  attribute: { enumerable: true },
  mixinMixinAttr: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"UnderscoredProperties\\", configurable: true },
  const: { value: 42, enumerable: true },
  mixinMixinConst: { value: 42, enumerable: true }
});
Object.defineProperties(UnderscoredProperties, {
  static: { enumerable: true },
  const: { value: 42, enumerable: true },
  mixinMixinConst: { value: 42, enumerable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'UnderscoredProperties'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(UnderscoredProperties.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(UnderscoredProperties.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: UnderscoredProperties,
  expose: {
    Window: { UnderscoredProperties }
  }
}; // iface
module.exports = iface;

MixinMixin._mixedIntoPredicates.push(module.exports.is);

const Impl = require(\\"../implementations/UnderscoredProperties.js\\");
"
`;

exports[`Unforgeable.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class Unforgeable {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }
}
Object.defineProperties(Unforgeable.prototype, { [Symbol.toStringTag]: { value: \\"Unforgeable\\", configurable: true } });
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'Unforgeable'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(Unforgeable.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(Unforgeable.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {
    Object.defineProperties(
      obj,
      utils.getOwnPropertyDescriptors({
        assign(url) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          if (arguments.length < 1) {
            throw new TypeError(
              \\"Failed to execute 'assign' on 'Unforgeable': 1 argument required, but only \\" +
                arguments.length +
                \\" present.\\"
            );
          }
          const args = [];
          {
            let curArg = arguments[0];
            curArg = conversions[\\"USVString\\"](curArg, {
              context: \\"Failed to execute 'assign' on 'Unforgeable': parameter 1\\"
            });
            args.push(curArg);
          }
          return this[impl].assign(...args);
        },
        get href() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          return obj[impl][\\"href\\"];
        },
        set href(V) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          V = conversions[\\"USVString\\"](V, {
            context: \\"Failed to set the 'href' property on 'Unforgeable': The provided value\\"
          });

          obj[impl][\\"href\\"] = V;
        },
        toString() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }
          return obj[impl][\\"href\\"];
        },
        get origin() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          return obj[impl][\\"origin\\"];
        },
        get protocol() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          return obj[impl][\\"protocol\\"];
        },
        set protocol(V) {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          V = conversions[\\"USVString\\"](V, {
            context: \\"Failed to set the 'protocol' property on 'Unforgeable': The provided value\\"
          });

          obj[impl][\\"protocol\\"] = V;
        }
      })
    );

    Object.defineProperties(obj, {
      assign: { configurable: false, writable: false },
      href: { configurable: false },
      toString: { configurable: false, writable: false },
      origin: { configurable: false },
      protocol: { configurable: false }
    });
  },
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: Unforgeable,
  expose: {
    Window: { Unforgeable }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/Unforgeable.js\\");
"
`;

exports[`UnforgeableMap.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class UnforgeableMap {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }
}
Object.defineProperties(UnforgeableMap.prototype, {
  [Symbol.toStringTag]: { value: \\"UnforgeableMap\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'UnforgeableMap'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(UnforgeableMap.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(UnforgeableMap.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {
    Object.defineProperties(
      obj,
      utils.getOwnPropertyDescriptors({
        get a() {
          if (!this || !module.exports.is(this)) {
            throw new TypeError(\\"Illegal invocation\\");
          }

          return obj[impl][\\"a\\"];
        }
      })
    );

    Object.defineProperties(obj, { a: { configurable: false } });
  },
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj = new Proxy(obj, {
      get(target, P, receiver) {
        if (typeof P === \\"symbol\\") {
          return Reflect.get(target, P, receiver);
        }
        const desc = this.getOwnPropertyDescriptor(target, P);
        if (desc === undefined) {
          const parent = Object.getPrototypeOf(target);
          if (parent === null) {
            return undefined;
          }
          return Reflect.get(target, P, receiver);
        }
        if (!desc.get && !desc.set) {
          return desc.value;
        }
        const getter = desc.get;
        if (getter === undefined) {
          return undefined;
        }
        return Reflect.apply(getter, receiver, []);
      },

      has(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.has(target, P);
        }
        const desc = this.getOwnPropertyDescriptor(target, P);
        if (desc !== undefined) {
          return true;
        }
        const parent = Object.getPrototypeOf(target);
        if (parent !== null) {
          return Reflect.has(parent, P);
        }
        return false;
      },

      ownKeys(target) {
        const keys = new Set();

        for (const key of target[impl][utils.supportedPropertyNames]) {
          if (!(key in target)) {
            keys.add(\`\${key}\`);
          }
        }

        for (const key of Reflect.ownKeys(target)) {
          keys.add(key);
        }
        return [...keys];
      },

      getOwnPropertyDescriptor(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.getOwnPropertyDescriptor(target, P);
        }
        let ignoreNamedProps = false;

        if (target[impl][utils.supportsPropertyName](P) && !(P in target) && !ignoreNamedProps) {
          const namedValue = target[impl][utils.namedGet](P);

          return {
            writable: true,
            enumerable: true,
            configurable: true,
            value: utils.tryWrapperForImpl(namedValue)
          };
        }

        return Reflect.getOwnPropertyDescriptor(target, P);
      },

      set(target, P, V, receiver) {
        if (typeof P === \\"symbol\\") {
          return Reflect.set(target, P, V, receiver);
        }
        if (target === receiver) {
          if (typeof P === \\"string\\" && !utils.isArrayIndexPropName(P)) {
            let namedValue = V;

            namedValue = conversions[\\"DOMString\\"](namedValue, {
              context: \\"Failed to set the '\\" + P + \\"' property on 'UnforgeableMap': The provided value\\"
            });

            const creating = !target[impl][utils.supportsPropertyName](P);
            if (creating) {
              target[impl][utils.namedSetNew](P, namedValue);
            } else {
              target[impl][utils.namedSetExisting](P, namedValue);
            }

            return true;
          }
        }
        let ownDesc;

        if (ownDesc === undefined) {
          ownDesc = Reflect.getOwnPropertyDescriptor(target, P);
        }
        if (ownDesc === undefined) {
          const parent = Reflect.getPrototypeOf(target);
          if (parent !== null) {
            return Reflect.set(parent, P, V, receiver);
          }
          ownDesc = { writable: true, enumerable: true, configurable: true, value: undefined };
        }
        if (!ownDesc.writable) {
          return false;
        }
        if (!utils.isObject(receiver)) {
          return false;
        }
        const existingDesc = Reflect.getOwnPropertyDescriptor(receiver, P);
        let valueDesc;
        if (existingDesc !== undefined) {
          if (existingDesc.get || existingDesc.set) {
            return false;
          }
          if (!existingDesc.writable) {
            return false;
          }
          valueDesc = { value: V };
        } else {
          valueDesc = { writable: true, enumerable: true, configurable: true, value: V };
        }
        return Reflect.defineProperty(receiver, P, valueDesc);
      },

      defineProperty(target, P, desc) {
        if (typeof P === \\"symbol\\") {
          return Reflect.defineProperty(target, P, desc);
        }
        if (![\\"a\\"].includes(P)) {
          if (!utils.hasOwn(target, P)) {
            if (desc.get || desc.set) {
              return false;
            }

            let namedValue = desc.value;

            namedValue = conversions[\\"DOMString\\"](namedValue, {
              context: \\"Failed to set the '\\" + P + \\"' property on 'UnforgeableMap': The provided value\\"
            });

            const creating = !target[impl][utils.supportsPropertyName](P);
            if (creating) {
              target[impl][utils.namedSetNew](P, namedValue);
            } else {
              target[impl][utils.namedSetExisting](P, namedValue);
            }

            return true;
          }
        }
        return Reflect.defineProperty(target, P, desc);
      },

      deleteProperty(target, P) {
        if (typeof P === \\"symbol\\") {
          return Reflect.deleteProperty(target, P);
        }

        if (target[impl][utils.supportsPropertyName](P) && !(P in target)) {
          return false;
        }

        return Reflect.deleteProperty(target, P);
      },

      preventExtensions() {
        return false;
      }
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: UnforgeableMap,
  expose: {
    Window: { UnforgeableMap }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/UnforgeableMap.js\\");
"
`;

exports[`Unscopable.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class Unscopable {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  get unscopableTest() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"unscopableTest\\"];
  }

  set unscopableTest(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"boolean\\"](V, {
      context: \\"Failed to set the 'unscopableTest' property on 'Unscopable': The provided value\\"
    });

    this[impl][\\"unscopableTest\\"] = V;
  }

  get unscopableMixin() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    return this[impl][\\"unscopableMixin\\"];
  }

  set unscopableMixin(V) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    V = conversions[\\"boolean\\"](V, {
      context: \\"Failed to set the 'unscopableMixin' property on 'Unscopable': The provided value\\"
    });

    this[impl][\\"unscopableMixin\\"] = V;
  }
}
Object.defineProperties(Unscopable.prototype, {
  unscopableTest: { enumerable: true },
  unscopableMixin: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"Unscopable\\", configurable: true },
  [Symbol.unscopables]: { value: { unscopableTest: true, unscopableMixin: true }, configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'Unscopable'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(Unscopable.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(Unscopable.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: Unscopable,
  expose: {
    Window: { Unscopable }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/Unscopable.js\\");
"
`;

exports[`Variadic.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const convertURL = require(\\"./URL.js\\").convert;
const impl = utils.implSymbol;

class Variadic {
  constructor() {
    throw new TypeError(\\"Illegal constructor\\");
  }

  simple1() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }
    const args = [];
    for (let i = 0; i < arguments.length; i++) {
      let curArg = arguments[i];
      curArg = conversions[\\"DOMString\\"](curArg, {
        context: \\"Failed to execute 'simple1' on 'Variadic': parameter \\" + (i + 1)
      });
      args.push(curArg);
    }
    return this[impl].simple1(...args);
  }

  simple2(first) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'simple2' on 'Variadic': 1 argument required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    {
      let curArg = arguments[0];
      curArg = conversions[\\"DOMString\\"](curArg, { context: \\"Failed to execute 'simple2' on 'Variadic': parameter 1\\" });
      args.push(curArg);
    }
    for (let i = 1; i < arguments.length; i++) {
      let curArg = arguments[i];
      curArg = convertURL(curArg, { context: \\"Failed to execute 'simple2' on 'Variadic': parameter \\" + (i + 1) });
      args.push(curArg);
    }
    return this[impl].simple2(...args);
  }

  overloaded1() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }
    const args = [];
    switch (arguments.length) {
      case 0:
        break;
      default: {
        let curArg = arguments[0];
        if (typeof curArg === \\"number\\") {
          for (let i = 0; i < arguments.length; i++) {
            let curArg = arguments[i];
            curArg = conversions[\\"unsigned long\\"](curArg, {
              context: \\"Failed to execute 'overloaded1' on 'Variadic': parameter \\" + (i + 1)
            });
            args.push(curArg);
          }
        } else {
          for (let i = 0; i < arguments.length; i++) {
            let curArg = arguments[i];
            curArg = conversions[\\"DOMString\\"](curArg, {
              context: \\"Failed to execute 'overloaded1' on 'Variadic': parameter \\" + (i + 1)
            });
            args.push(curArg);
          }
        }
      }
    }
    return this[impl].overloaded1(...args);
  }

  overloaded2(first) {
    if (!this || !module.exports.is(this)) {
      throw new TypeError(\\"Illegal invocation\\");
    }

    if (arguments.length < 1) {
      throw new TypeError(
        \\"Failed to execute 'overloaded2' on 'Variadic': 1 argument required, but only \\" + arguments.length + \\" present.\\"
      );
    }
    const args = [];
    switch (arguments.length) {
      case 1:
        {
          let curArg = arguments[0];
          if (typeof curArg === \\"number\\") {
            {
              let curArg = arguments[0];
              curArg = conversions[\\"unsigned long\\"](curArg, {
                context: \\"Failed to execute 'overloaded2' on 'Variadic': parameter 1\\"
              });
              args.push(curArg);
            }
          } else {
            {
              let curArg = arguments[0];
              curArg = conversions[\\"DOMString\\"](curArg, {
                context: \\"Failed to execute 'overloaded2' on 'Variadic': parameter 1\\"
              });
              args.push(curArg);
            }
          }
        }
        break;
      default: {
        let curArg = arguments[0];
        if (typeof curArg === \\"number\\") {
          {
            let curArg = arguments[0];
            curArg = conversions[\\"unsigned long\\"](curArg, {
              context: \\"Failed to execute 'overloaded2' on 'Variadic': parameter 1\\"
            });
            args.push(curArg);
          }
          for (let i = 1; i < arguments.length; i++) {
            let curArg = arguments[i];
            curArg = conversions[\\"DOMString\\"](curArg, {
              context: \\"Failed to execute 'overloaded2' on 'Variadic': parameter \\" + (i + 1)
            });
            args.push(curArg);
          }
        } else {
          {
            let curArg = arguments[0];
            curArg = conversions[\\"DOMString\\"](curArg, {
              context: \\"Failed to execute 'overloaded2' on 'Variadic': parameter 1\\"
            });
            args.push(curArg);
          }
          for (let i = 1; i < arguments.length; i++) {
            let curArg = arguments[i];
            curArg = conversions[\\"DOMString\\"](curArg, {
              context: \\"Failed to execute 'overloaded2' on 'Variadic': parameter \\" + (i + 1)
            });
            args.push(curArg);
          }
        }
      }
    }
    return this[impl].overloaded2(...args);
  }
}
Object.defineProperties(Variadic.prototype, {
  simple1: { enumerable: true },
  simple2: { enumerable: true },
  overloaded1: { enumerable: true },
  overloaded2: { enumerable: true },
  [Symbol.toStringTag]: { value: \\"Variadic\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'Variadic'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(Variadic.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(Variadic.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: Variadic,
  expose: {
    Window: { Variadic }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/Variadic.js\\");
"
`;

exports[`ZeroArgConstructor.webidl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");

const impl = utils.implSymbol;

class ZeroArgConstructor {
  constructor() {
    return iface.setup(Object.create(new.target.prototype));
  }
}
Object.defineProperties(ZeroArgConstructor.prototype, {
  [Symbol.toStringTag]: { value: \\"ZeroArgConstructor\\", configurable: true }
});
const iface = {
  // When an interface-module that implements this interface as a mixin is loaded, it will append its own \`.is()\`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'ZeroArgConstructor'.\`);
  },

  create(constructorArgs, privateData) {
    let obj = Object.create(ZeroArgConstructor.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(ZeroArgConstructor.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};

    privateData.wrapper = obj;

    this._internalSetup(obj);
    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      configurable: true
    });

    obj[impl][utils.wrapperSymbol] = obj;
    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }
    return obj;
  },
  interface: ZeroArgConstructor,
  expose: {
    Window: { ZeroArgConstructor }
  }
}; // iface
module.exports = iface;

const Impl = require(\\"../implementations/ZeroArgConstructor.js\\");
"
`;
