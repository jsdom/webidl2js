// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PromiseTypes.idl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");
const impl = utils.implSymbol;

function PromiseTypes() {
  throw new TypeError(\\"Illegal constructor\\");
}

PromiseTypes.prototype.voidPromiseConsumer = function voidPromiseConsumer(p) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(
      \\"Failed to execute 'voidPromiseConsumer' on 'PromiseTypes': 1 argument required, but only \\" +
        arguments.length +
        \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  args[0] = Promise.resolve(args[0]).then(value => {}, reason => reason);
  return this[impl].voidPromiseConsumer(...args);
};

PromiseTypes.prototype.promiseConsumer = function promiseConsumer(p) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(
      \\"Failed to execute 'promiseConsumer' on 'PromiseTypes': 1 argument required, but only \\" +
        arguments.length +
        \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  args[0] = Promise.resolve(args[0]).then(value => {
    value = conversions[\\"double\\"](value, {
      context: \\"Failed to execute 'promiseConsumer' on 'PromiseTypes': parameter 1\\" + \\" promise value\\"
    });
    return value;
  }, reason => reason);
  return this[impl].promiseConsumer(...args);
};

Object.defineProperty(PromiseTypes.prototype, Symbol.toStringTag, {
  value: \\"PromiseTypes\\",
  writable: false,
  enumerable: false,
  configurable: true
});

const iface = {
  mixedInto: [],
  is(obj) {
    if (obj) {
      if (obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (obj instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (wrapper instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'PromiseTypes'.\`);
  },
  create(constructorArgs, privateData) {
    let obj = Object.create(PromiseTypes.prototype);
    this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(PromiseTypes.prototype);
    this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      writable: false,
      enumerable: false,
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;
  },
  interface: PromiseTypes,
  expose: {
    Window: { PromiseTypes: PromiseTypes }
  }
};
module.exports = iface;

const Impl = require(\\"../implementations/PromiseTypes.js\\");
"
`;

exports[`SeqAndRec.idl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");
const impl = utils.implSymbol;
const convertURL = require(\\"./URL\\").convert;

function SeqAndRec() {
  iface.setup(this);
}

SeqAndRec.prototype.recordConsumer = function recordConsumer(rec) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(
      \\"Failed to execute 'recordConsumer' on 'SeqAndRec': 1 argument required, but only \\" +
        arguments.length +
        \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  if (args[0] === null || (typeof args[0] !== \\"object\\" && typeof args[0] !== \\"function\\")) {
    throw new TypeError(\\"Failed to execute 'recordConsumer' on 'SeqAndRec': parameter 1\\" + \\" is not an object.\\");
  } else {
    const result = Object.create(null);
    for (const key of Reflect.ownKeys(args[0])) {
      const desc = Object.getOwnPropertyDescriptor(args[0], key);
      if (desc && desc.enumerable) {
        let typedKey = key;
        let typedValue = args[0][key];
        typedKey = conversions[\\"USVString\\"](typedKey, {
          context: \\"Failed to execute 'recordConsumer' on 'SeqAndRec': parameter 1\\" + \\"'s key\\"
        });
        typedValue = conversions[\\"double\\"](typedValue, {
          context: \\"Failed to execute 'recordConsumer' on 'SeqAndRec': parameter 1\\" + \\"'s value\\"
        });
        result[typedKey] = typedValue;
      }
    }
    args[0] = result;
  }
  return this[impl].recordConsumer(...args);
};

SeqAndRec.prototype.recordConsumer2 = function recordConsumer2(rec) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(
      \\"Failed to execute 'recordConsumer2' on 'SeqAndRec': 1 argument required, but only \\" +
        arguments.length +
        \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  if (args[0] === null || (typeof args[0] !== \\"object\\" && typeof args[0] !== \\"function\\")) {
    throw new TypeError(\\"Failed to execute 'recordConsumer2' on 'SeqAndRec': parameter 1\\" + \\" is not an object.\\");
  } else {
    const result = Object.create(null);
    for (const key of Reflect.ownKeys(args[0])) {
      const desc = Object.getOwnPropertyDescriptor(args[0], key);
      if (desc && desc.enumerable) {
        let typedKey = key;
        let typedValue = args[0][key];
        typedKey = conversions[\\"USVString\\"](typedKey, {
          context: \\"Failed to execute 'recordConsumer2' on 'SeqAndRec': parameter 1\\" + \\"'s key\\"
        });
        typedValue = convertURL(typedValue, {
          context: \\"Failed to execute 'recordConsumer2' on 'SeqAndRec': parameter 1\\" + \\"'s value\\"
        });
        result[typedKey] = typedValue;
      }
    }
    args[0] = result;
  }
  return this[impl].recordConsumer2(...args);
};

SeqAndRec.prototype.sequenceConsumer = function sequenceConsumer(seq) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(
      \\"Failed to execute 'sequenceConsumer' on 'SeqAndRec': 1 argument required, but only \\" +
        arguments.length +
        \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  if (args[0] === null || (typeof args[0] !== \\"object\\" && typeof args[0] !== \\"function\\")) {
    throw new TypeError(
      \\"Failed to execute 'sequenceConsumer' on 'SeqAndRec': parameter 1\\" + \\" is not an iterable object.\\"
    );
  } else {
    const V = [];
    const tmp = args[0];
    for (let nextItem of tmp) {
      nextItem = conversions[\\"USVString\\"](nextItem, {
        context: \\"Failed to execute 'sequenceConsumer' on 'SeqAndRec': parameter 1\\" + \\"'s element\\"
      });
      V.push(nextItem);
    }
    args[0] = V;
  }
  return this[impl].sequenceConsumer(...args);
};

SeqAndRec.prototype.sequenceConsumer2 = function sequenceConsumer2(seq) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(
      \\"Failed to execute 'sequenceConsumer2' on 'SeqAndRec': 1 argument required, but only \\" +
        arguments.length +
        \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  if (args[0] === null || (typeof args[0] !== \\"object\\" && typeof args[0] !== \\"function\\")) {
    throw new TypeError(
      \\"Failed to execute 'sequenceConsumer2' on 'SeqAndRec': parameter 1\\" + \\" is not an iterable object.\\"
    );
  } else {
    const V = [];
    const tmp = args[0];
    for (let nextItem of tmp) {
      nextItem = utils.tryImplForWrapper(nextItem);
      V.push(nextItem);
    }
    args[0] = V;
  }
  return this[impl].sequenceConsumer2(...args);
};

SeqAndRec.prototype.frozenArrayConsumer = function frozenArrayConsumer(arr) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(
      \\"Failed to execute 'frozenArrayConsumer' on 'SeqAndRec': 1 argument required, but only \\" +
        arguments.length +
        \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  if (args[0] === null || (typeof args[0] !== \\"object\\" && typeof args[0] !== \\"function\\")) {
    throw new TypeError(
      \\"Failed to execute 'frozenArrayConsumer' on 'SeqAndRec': parameter 1\\" + \\" is not an iterable object.\\"
    );
  } else {
    const V = [];
    const tmp = args[0];
    for (let nextItem of tmp) {
      nextItem = conversions[\\"double\\"](nextItem, {
        context: \\"Failed to execute 'frozenArrayConsumer' on 'SeqAndRec': parameter 1\\" + \\"'s element\\"
      });
      V.push(nextItem);
    }
    args[0] = V;
  }
  args[0] = Object.freeze(args[0]);
  return this[impl].frozenArrayConsumer(...args);
};

Object.defineProperty(SeqAndRec.prototype, Symbol.toStringTag, {
  value: \\"SeqAndRec\\",
  writable: false,
  enumerable: false,
  configurable: true
});

const iface = {
  mixedInto: [],
  is(obj) {
    if (obj) {
      if (obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (obj instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (wrapper instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'SeqAndRec'.\`);
  },
  create(constructorArgs, privateData) {
    let obj = Object.create(SeqAndRec.prototype);
    this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(SeqAndRec.prototype);
    this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      writable: false,
      enumerable: false,
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;
  },
  interface: SeqAndRec,
  expose: {
    Window: { SeqAndRec: SeqAndRec }
  }
};
module.exports = iface;

const Impl = require(\\"../implementations/SeqAndRec.js\\");
"
`;

exports[`URL.idl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");
const impl = utils.implSymbol;

function URL(url) {
  if (!new.target) {
    throw new TypeError(
      \\"Failed to construct 'URL'. Please use the 'new' operator; this constructor cannot be called as a function.\\"
    );
  }
  if (arguments.length < 1) {
    throw new TypeError(\\"Failed to construct 'URL': 1 argument required, but only \\" + arguments.length + \\" present.\\");
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 2; ++i) {
    args[i] = arguments[i];
  }
  args[0] = conversions[\\"USVString\\"](args[0], { context: \\"Failed to construct 'URL': parameter 1\\" });
  if (args[1] !== undefined) {
    args[1] = conversions[\\"USVString\\"](args[1], { context: \\"Failed to construct 'URL': parameter 2\\" });
  }

  iface.setup(this, args);
}

URL.prototype.toJSON = function toJSON() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  return this[impl].toJSON();
};
Object.defineProperty(URL.prototype, \\"href\\", {
  get() {
    return this[impl].href;
  },
  set(V) {
    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'href' property on 'URL': The provided value\\" });
    this[impl].href = V;
  },
  enumerable: true,
  configurable: true
});

URL.prototype.toString = function() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  return this[impl].href;
};

Object.defineProperty(URL.prototype, \\"origin\\", {
  get() {
    return this[impl].origin;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, \\"protocol\\", {
  get() {
    return this[impl].protocol;
  },
  set(V) {
    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'protocol' property on 'URL': The provided value\\" });
    this[impl].protocol = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, \\"username\\", {
  get() {
    return this[impl].username;
  },
  set(V) {
    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'username' property on 'URL': The provided value\\" });
    this[impl].username = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, \\"password\\", {
  get() {
    return this[impl].password;
  },
  set(V) {
    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'password' property on 'URL': The provided value\\" });
    this[impl].password = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, \\"host\\", {
  get() {
    return this[impl].host;
  },
  set(V) {
    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'host' property on 'URL': The provided value\\" });
    this[impl].host = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, \\"hostname\\", {
  get() {
    return this[impl].hostname;
  },
  set(V) {
    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'hostname' property on 'URL': The provided value\\" });
    this[impl].hostname = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, \\"port\\", {
  get() {
    return this[impl].port;
  },
  set(V) {
    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'port' property on 'URL': The provided value\\" });
    this[impl].port = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, \\"pathname\\", {
  get() {
    return this[impl].pathname;
  },
  set(V) {
    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'pathname' property on 'URL': The provided value\\" });
    this[impl].pathname = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, \\"search\\", {
  get() {
    return this[impl].search;
  },
  set(V) {
    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'search' property on 'URL': The provided value\\" });
    this[impl].search = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, \\"searchParams\\", {
  get() {
    return utils.getSameObject(this, \\"searchParams\\", () => {
      return utils.tryWrapperForImpl(this[impl].searchParams);
    });
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, \\"hash\\", {
  get() {
    return this[impl].hash;
  },
  set(V) {
    V = conversions[\\"USVString\\"](V, { context: \\"Failed to set the 'hash' property on 'URL': The provided value\\" });
    this[impl].hash = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, Symbol.toStringTag, {
  value: \\"URL\\",
  writable: false,
  enumerable: false,
  configurable: true
});

const iface = {
  mixedInto: [],
  is(obj) {
    if (obj) {
      if (obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (obj instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (wrapper instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'URL'.\`);
  },
  create(constructorArgs, privateData) {
    let obj = Object.create(URL.prototype);
    this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(URL.prototype);
    this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      writable: false,
      enumerable: false,
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;
  },
  interface: URL,
  expose: {
    Window: { URL: URL },
    Worker: { URL: URL }
  }
};
module.exports = iface;

const Impl = require(\\"../implementations/URL.js\\");
"
`;

exports[`URLSearchParams.idl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");
const impl = utils.implSymbol;

const IteratorPrototype = Object.create(utils.IteratorPrototype, {
  next: {
    value: function next() {
      const internal = this[utils.iterInternalSymbol];
      const { target, kind, index } = internal;
      const values = Array.from(target[impl]);
      const len = values.length;
      if (index >= len) {
        return { value: undefined, done: true };
      }

      const pair = values[index];
      internal.index = index + 1;
      const [key, value] = pair.map(utils.tryWrapperForImpl);

      let result;
      switch (kind) {
        case \\"key\\":
          result = key;
          break;
        case \\"value\\":
          result = value;
          break;
        case \\"key+value\\":
          result = [key, value];
          break;
      }
      return { value: result, done: false };
    },
    writable: true,
    enumerable: true,
    configurable: true
  },
  [Symbol.toStringTag]: {
    value: \\"URLSearchParamsIterator\\",
    writable: false,
    enumerable: false,
    configurable: true
  }
});

function URLSearchParams() {
  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  if (args[0] !== undefined) {
    args[0] = utils.tryImplForWrapper(args[0]);
  } else {
    args[0] = \\"\\";
  }

  iface.setup(this, args);
}

URLSearchParams.prototype.append = function append(name, value) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 2) {
    throw new TypeError(
      \\"Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only \\" +
        arguments.length +
        \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 2; ++i) {
    args[i] = arguments[i];
  }
  args[0] = conversions[\\"USVString\\"](args[0], {
    context: \\"Failed to execute 'append' on 'URLSearchParams': parameter 1\\"
  });
  args[1] = conversions[\\"USVString\\"](args[1], {
    context: \\"Failed to execute 'append' on 'URLSearchParams': parameter 2\\"
  });
  return this[impl].append(...args);
};

URLSearchParams.prototype.delete = function _(name) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(
      \\"Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only \\" + arguments.length + \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  args[0] = conversions[\\"USVString\\"](args[0], {
    context: \\"Failed to execute 'delete' on 'URLSearchParams': parameter 1\\"
  });
  return this[impl].delete(...args);
};

URLSearchParams.prototype.get = function get(name) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(
      \\"Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only \\" + arguments.length + \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  args[0] = conversions[\\"USVString\\"](args[0], { context: \\"Failed to execute 'get' on 'URLSearchParams': parameter 1\\" });
  return this[impl].get(...args);
};

URLSearchParams.prototype.getAll = function getAll(name) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(
      \\"Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only \\" + arguments.length + \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  args[0] = conversions[\\"USVString\\"](args[0], {
    context: \\"Failed to execute 'getAll' on 'URLSearchParams': parameter 1\\"
  });
  return utils.tryWrapperForImpl(this[impl].getAll(...args));
};

URLSearchParams.prototype.has = function has(name) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(
      \\"Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only \\" + arguments.length + \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }
  args[0] = conversions[\\"USVString\\"](args[0], { context: \\"Failed to execute 'has' on 'URLSearchParams': parameter 1\\" });
  return this[impl].has(...args);
};

URLSearchParams.prototype.set = function set(name, value) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 2) {
    throw new TypeError(
      \\"Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only \\" + arguments.length + \\" present.\\"
    );
  }

  const args = [];
  for (let i = 0; i < arguments.length && i < 2; ++i) {
    args[i] = arguments[i];
  }
  args[0] = conversions[\\"USVString\\"](args[0], { context: \\"Failed to execute 'set' on 'URLSearchParams': parameter 1\\" });
  args[1] = conversions[\\"USVString\\"](args[1], { context: \\"Failed to execute 'set' on 'URLSearchParams': parameter 2\\" });
  return this[impl].set(...args);
};

URLSearchParams.prototype.sort = function sort() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  return this[impl].sort();
};

URLSearchParams.prototype[Symbol.iterator] = function entries() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  return module.exports.createDefaultIterator(this, \\"key+value\\");
};
URLSearchParams.prototype.entries = URLSearchParams.prototype[Symbol.iterator];
URLSearchParams.prototype.keys = function keys() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  return module.exports.createDefaultIterator(this, \\"key\\");
};
URLSearchParams.prototype.values = function values() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  return module.exports.createDefaultIterator(this, \\"value\\");
};
URLSearchParams.prototype.forEach = function forEach(callback) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  if (arguments.length < 1) {
    throw new TypeError(\\"Failed to execute 'forEach' on 'URLSearchParams': 1 argument required, but only 0 present.\\");
  }
  if (typeof callback !== \\"function\\") {
    throw new TypeError(
      \\"Failed to execute 'forEach' on 'URLSearchParams': The callback provided as parameter 1 is not a function.\\"
    );
  }
  const thisArg = arguments[1];
  let pairs = Array.from(this[impl]);
  let i = 0;
  while (i < pairs.length) {
    const [key, value] = pairs[i].map(utils.tryWrapperForImpl);
    callback.call(thisArg, value, key, this);
    pairs = Array.from(this[impl]);
    i++;
  }
};
URLSearchParams.prototype.toString = function toString() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError(\\"Illegal invocation\\");
  }
  return utils.tryWrapperForImpl(this[impl].toString());
};

Object.defineProperty(URLSearchParams.prototype, Symbol.toStringTag, {
  value: \\"URLSearchParams\\",
  writable: false,
  enumerable: false,
  configurable: true
});

const iface = {
  mixedInto: [],
  is(obj) {
    if (obj) {
      if (obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (obj instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (wrapper instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'URLSearchParams'.\`);
  },
  createDefaultIterator(target, kind) {
    const iterator = Object.create(IteratorPrototype);
    Object.defineProperty(iterator, utils.iterInternalSymbol, {
      value: { target, kind, index: 0 },
      writable: false,
      enumerable: false,
      configurable: true
    });
    return iterator;
  },
  create(constructorArgs, privateData) {
    let obj = Object.create(URLSearchParams.prototype);
    this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(URLSearchParams.prototype);
    this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      writable: false,
      enumerable: false,
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;
  },
  interface: URLSearchParams,
  expose: {
    Window: { URLSearchParams: URLSearchParams },
    Worker: { URLSearchParams: URLSearchParams }
  }
};
module.exports = iface;

const Impl = require(\\"../implementations/URLSearchParams.js\\");
"
`;

exports[`ZeroArgConstructor.idl 1`] = `
"\\"use strict\\";

const conversions = require(\\"webidl-conversions\\");
const utils = require(\\"./utils.js\\");
const impl = utils.implSymbol;

function ZeroArgConstructor() {
  iface.setup(this);
}

Object.defineProperty(ZeroArgConstructor.prototype, Symbol.toStringTag, {
  value: \\"ZeroArgConstructor\\",
  writable: false,
  enumerable: false,
  configurable: true
});

const iface = {
  mixedInto: [],
  is(obj) {
    if (obj) {
      if (obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (obj instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (let i = 0; i < module.exports.mixedInto.length; ++i) {
        if (wrapper instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = \\"The provided value\\" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(\`\${context} is not of type 'ZeroArgConstructor'.\`);
  },
  create(constructorArgs, privateData) {
    let obj = Object.create(ZeroArgConstructor.prototype);
    this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl(constructorArgs, privateData) {
    let obj = Object.create(ZeroArgConstructor.prototype);
    this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup(obj) {},
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      writable: false,
      enumerable: false,
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;
  },
  interface: ZeroArgConstructor,
  expose: {
    Window: { ZeroArgConstructor: ZeroArgConstructor }
  }
};
module.exports = iface;

const Impl = require(\\"../implementations/ZeroArgConstructor.js\\");
"
`;
